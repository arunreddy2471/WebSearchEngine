https://www.geeksforgeeks.org/analysis-of-algorithms-set-2-asymptotic-analysis/?ref=ghm Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles â–² Related Articles Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) View Discussion Improve Article Save Article Like Article Difficulty Level : Easy Last Updated : 13 Jul, 2022 In the previous post, we discussed how Asymptotic analysis overcomes the problems of the naive way of analyzing algorithms. In this post, we will take an example of Linear Search and analyze it using Asymptotic analysis. We can have three cases to analyze an algorithm: 1) The Worst Case 2) Average Case 3) Best Case Example 1: Let us consider the following implementation of Linear Search. C++ // C++ implementation of the approach #include <bits/stdc++.h> using namespace std; // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } // Driver Code int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); cout << x << " is present at index " << search(arr, n, x); getchar(); return 0; } // This code is contributed // by Akanksha Rai C // C implementation of the approach #include <stdio.h> // Linearly search x in arr[]. // If x is present then return the index, // otherwise return -1 int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1; } /* Driver program to test above functions*/ int main() { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); printf("%d is present at index %d", x, search(arr, n, x)); getchar(); return 0; } Java // Java implementation of the approach public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void main(String[] args) { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = arr.length; System.out.printf("%d is present at index %d", x, search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ Python3 # Python 3 implementation of the approach # Linearly search x in arr[]. If x is present # then return the index, otherwise return -1 def search(arr, x): for index, value in enumerate(arr): if value == x: return index return -1 # Driver Code arr = [1, 10, 30, 15] x = 30 print(x, "is present at index", search(arr, x)) # This code is contributed # by PrinciRaj1992 C# // C# implementation of the approach using System; public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int[] arr, int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void Main() { int[] arr = { 1, 10, 30, 15 }; int x = 30; int n = arr.Length; Console.WriteLine(x + " is present at index " + search(arr, n, x)); } } /*This code is contributed by PrinciRaj1992*/ PHP <?php // PHP implementation of the approach // Linearly search x in arr[]. If x // is present then return the index, // otherwise return -1 function search($arr, $n, $x) { for ($i = 0; $i < $n; $i++) { if ($arr[$i] == $x) return $i; } return -1; } // Driver Code $arr = array(1, 10, 30, 15); $x = 30; $n = sizeof($arr); echo $x . " is present at index ". search($arr, $n, $x); // This code is contributed // by Akanksha Rai Javascript <script> // javascript implementation of the approach // Linearly search x in arr. If x is present then // return the index, otherwise return -1 function search(arr , n , x) { var i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions */ var arr = [ 1, 10, 30, 15 ]; var x = 30; var n = arr.length; document.write(x+" is present at index "+ search(arr, n, x)); // This code is contributed by gauravrajput1 </script> Output: 30 is present at index 2 Worst Case Analysis (Usually Done) In the worst-case analysis, we calculate the upper bound on the running time of an algorithm. We must know the case that causes a maximum number of operations to be executed. For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() function compares it with all the elements of arr[] one by one. Therefore, the worst-case time complexity of linear search would be Î˜(n). Average Case Analysis (Sometimes done) In average case analysis, we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by the total number of inputs. We must know (or predict) the distribution of cases. For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in the array). So we sum all the cases and divide the sum by (n+1). Following is the value of average-case time complexity. Average Case Time =  = = Î˜(n) Best Case Analysis (Bogus) In the best case analysis, we calculate the lower bound on the running time of an algorithm. We must know the case that causes a minimum number of operations to be executed. In the linear search problem, the best case occurs when x is present at the first location. The number of operations in the best case is constant (not dependent on n). So time complexity in the best case would be Î˜(1) Most of the times, we do worst-case analysis to analyze algorithms. In the worst analysis, we guarantee an upper bound on the running time of an algorithm which is good information. The average case analysis is not easy to do in most practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. The Best Case analysis is bogus. Guaranteeing a lower bound on an algorithm doesnâ€™t provide any information as in the worst case, an algorithm may take years to run. For some algorithms, all the cases are asymptotically the same, i.e., there are no worst and best cases. For example, Merge Sort. Merge Sort does Î˜(nlogn) operations in all cases. Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occurs when the pivot elements always divide the array into two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. Example 2: In this example , we will take an array of length (n) and deals with following cases : If (n) is even then our output will be 0 If (n) is odd then our output will be the sum of the elements of the array. Below is the code for the given problem : C++ // C++ implementation of the approach #include <bits/stdc++.h> using namespace std; int getSum(int arr[] , int n) { if(n%2==0) // (n) is even { return 0; } int sum=0; for (int i = 0; i < n; i++) { sum+=arr[i]; } return sum; // (n) is odd } // Driver Code int main() { // Declaring two array one of length odd and other of length even; int arr[4]={1,2,3,4}; int a[5] ={1,2,3,4,5}; cout<<getSum(arr,4)<<endl;// print 0 because (n) is even cout<<getSum(a,5)<<endl; // print sum because (n) is odd } // This code is contributed by Suruchi Kumari C #include <stdio.h> int getSum(int arr[] , int n) { if(n%2==0) // (n) is even { return 0; } int sum=0; for (int i = 0; i < n; i++) { sum+=arr[i]; } return sum; // (n) is odd } // Driver Code int main() { // Declaring two array one of length odd and other of length even; int arr[4]={1,2,3,4}; int a[5] ={1,2,3,4,5}; printf("%d\n",getSum(arr,4));// print 0 because (n) is even printf("%d\n",getSum(a,5)); // print sum because (n) is odd } // This code is contributed by Suruchi Kumari Output : 0
15 Best case : Order of growth will be constant because in the best case we are assuming that (n) is even Average case : In this case we will assume that even and odd are equally likely , therefore Order of growth will be linear Worst case : Order of growth will be linear because in this case we are assuming that (n) is always odd . For more details, please refer: Design and Analysis of Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Like Previous Analysis of Algorithms | Set 1 (Asymptotic Analysis) Next Analysis of Algorithms | Set 3 (Asymptotic Notations) Recommended Articles Page : Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Set 1 (Asymptotic Analysis) 03, Jan 12 Analysis of Algorithms | Big-O analysis 28, Feb 18 Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) 23, Sep 14 Use cases of mouse programming in C/C++ | Set 2 29, Dec 20 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 3 (Asymptotic Notations) 26, Oct 13 Donâ€™t Forget The Edge Cases ! 25, Jan 18 Use cases of mouse programming in C/C++ 29, Dec 20 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Analysis of algorithms | little o and little omega notations 14, Aug 17 Analysis of Algorithms | Big - â„¦ (Big- Omega) Notation 11, Jul 21 Analysis of Algorithms | Big - Î˜ (Big Theta) Notation 11, Jul 21 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 Prune-and-Search | A Complexity Analysis Overview 19, Jul 21 Difference between Posteriori and Priori analysis 07, Aug 19 What is algorithm and why analysis of it is important? 12, Jan 21 Find array elements that are greater than average 15, Apr 18 Average of Cubes of first N natural numbers 16, Jun 20 Analysis of different sorting techniques 29, Jan 18 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Amortized analysis for increment in counter 23, Mar 18 Guidelines for asymptotic analysis 27, May 21 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Easy Easy Normal Medium Hard Expert Improved By : princiraj1992 Akanksha_Rai AnkurChattopadhyay GauriShankarBadola urvishmahajan GauravRajput1 tanvibugdani suruchikumarimfp4 Article Tags : Complexity-analysis Algorithms Analysis Articles Practice Tags : Algorithms Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New DSA Live Classes for Working Professionals View Details Practice Problems, POTD Streak, Weekly Contests & More! View Details Complete Interview Preparation- Self Paced Course View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register