https://www.geeksforgeeks.org/count-of-pairs-with-given-sum-in-rotated-sorted-array/ Count of Pairs with given sum in Rotated Sorted Array - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles ▲ Related Articles Arrays in Java Write a program to reverse an array or string Largest Sum Contiguous Subarray Program for array rotation Arrays in C/C++ Stack Data Structure (Introduction and Program) Top 50 Array Coding Problems for Interviews Maximum and minimum of an array using minimum number of comparisons Linear Search Given an array A[] and a number x, check for pair in A[] with sum as x (aka Two Sum) Multidimensional Arrays in Java K'th Smallest/Largest Element in Unsorted Array | Set 1 Subset Sum Problem | DP-25 Python | Using 2D arrays/lists the right way Find the Missing Number Array of Strings in C++ - 5 Different Ways to Create Queue | Set 1 (Introduction and Array Implementation) Search an element in a sorted and rotated Array Count Inversions in an array | Set 1 (Using Merge Sort) Linked List vs Array Program to find largest element in an array Introduction to Arrays Sort an array of 0s, 1s and 2s | Dutch National Flag problem Write a program to reverse an array or string Merge two sorted arrays Print a given matrix in spiral form Find Second largest element in an array Given an array of size n and a number k, find all elements that appear more than n/k times k largest(or smallest) elements in an array Sliding Window Maximum (Maximum of all subarrays of size k) Arrays in Java Write a program to reverse an array or string Largest Sum Contiguous Subarray Program for array rotation Arrays in C/C++ Stack Data Structure (Introduction and Program) Top 50 Array Coding Problems for Interviews Maximum and minimum of an array using minimum number of comparisons Linear Search Given an array A[] and a number x, check for pair in A[] with sum as x (aka Two Sum) Multidimensional Arrays in Java K'th Smallest/Largest Element in Unsorted Array | Set 1 Subset Sum Problem | DP-25 Python | Using 2D arrays/lists the right way Find the Missing Number Array of Strings in C++ - 5 Different Ways to Create Queue | Set 1 (Introduction and Array Implementation) Search an element in a sorted and rotated Array Count Inversions in an array | Set 1 (Using Merge Sort) Linked List vs Array Program to find largest element in an array Introduction to Arrays Sort an array of 0s, 1s and 2s | Dutch National Flag problem Write a program to reverse an array or string Merge two sorted arrays Print a given matrix in spiral form Find Second largest element in an array Given an array of size n and a number k, find all elements that appear more than n/k times k largest(or smallest) elements in an array Sliding Window Maximum (Maximum of all subarrays of size k) Count of Pairs with given sum in Rotated Sorted Array View Discussion Improve Article Save Article Like Article Last Updated : 28 Jul, 2022 Given an array arr[] of distinct elements size N that is sorted and then around an unknown point, the task is to count the number of pairs in the array having a given sum X. Examples: Input: arr[] = {11, 15, 26, 38, 9, 10}, X = 35 Output: 1 Explanation: There is a pair (26, 9) with sum 35 Input: arr[] = {11, 15, 6, 7, 9, 10}, X = 16 Output: 2 Approach: The idea is similar to what is mentioned below. First find the largest element in an array which is the pivot point also and the element just after the largest is the smallest element. Once we have the indices of the largest and the smallest elements, we use a similar meet-in-middle algorithm (as discussed here in method 1) to count the number of pairs that sum up to X. Indices are incremented and decremented in a rotational manner using modular arithmetic. Follow the below illustration for a better understanding. Illustration: Let us take an example arr[]={11, 15, 6, 7, 9, 10}, X = 16, count=0; Initially pivot = 1, l = 2, r = 1: => arr[2] + arr[1] = 6 + 15 = 21, which is > 16 => So decrement r = ( 6 + 1 – 1) % 6, r = 0 l = 2, r = 0: => arr[2] + arr[0] = 17 which is > 16, => So decrement r = (6 + 0 – 1) % 6, r = 5 l = 2, r = 5: => arr[2] + arr[5] = 16 which is equal to 16, => Hence count = 1 and => Decement r = (6 + 5 – 1) % 6, r = 4 and increment l = (2 + 1) % 6, l = 3 l = 3, r = 4: => arr[3] + arr[4] = 16 => Hence increment count. So count = 2 => So decement r = (6 + 4 – 1) % 6, r = 3 and increment l = 4 l = 4, r = 3: => l > r. So break the loop. So we get count = 2 Follow the below steps to implement the idea: We will run a for loop from 0 to N-1, to find out the pivot point. Set the left pointer(l) to the smallest value and the right pointer(r) to the highest value. To restrict the circular movement within the array, apply the modulo operation by the size of the array. While l ! = r, keep checking if arr[l] + arr[r] = sum. If arr[l] + arr[r] > sum, update r=(N+r-1) % N. If arr[l] + arr[r] < sum, update l=(l+1) % N. If arr[l] + arr[r] = sum, increment count. Also increment l and decrement r. Below is the implementation of the above idea. C++ // C++ program to find number of pairs with // a given sum in a sorted and rotated array. #include <bits/stdc++.h> using namespace std; // This function returns count of number of pairs // with sum equals to x. int pairsInSortedRotated(int arr[], int n, int x) { // Find the pivot element. Pivot element // is largest element of array. int i; for (i = 0; i < n - 1; i++) if (arr[i] > arr[i + 1]) break; // l is index of smallest element. int l = (i + 1) % n; // r is index of largest element. int r = i; // Variable to store count of number // of pairs. int cnt = 0; // Find sum of pair formed by arr[l] and // and arr[r] and update l, r and cnt // accordingly. while (l != r) { // If we find a pair with sum x, then // increment cnt, move l and r to // next element. if (arr[l] + arr[r] == x) { cnt++; // This condition is required to // be checked, otherwise l and r // will cross each other and loop // will never terminate. if (l == (r - 1 + n) % n) { return cnt; } l = (l + 1) % n; r = (r - 1 + n) % n; } // If current pair sum is less, move to // the higher sum side. else if (arr[l] + arr[r] < x) l = (l + 1) % n; // If current pair sum is greater, move // to the lower sum side. else r = (n + r - 1) % n; } return cnt; } /* Driver program to test above function */ int main() { int arr[] = { 11, 15, 6, 7, 9, 10 }; int X = 16; int N = sizeof(arr) / sizeof(arr[0]); cout << pairsInSortedRotated(arr, N, X); return 0; } Java // Java program to find // number of pairs with // a given sum in a sorted // and rotated array. import java.io.*; class GFG { // This function returns // count of number of pairs // with sum equals to x. static int pairsInSortedRotated(int arr[], int n, int x) { // Find the pivot element. // Pivot element is largest // element of array. int i; for (i = 0; i < n - 1; i++) if (arr[i] > arr[i + 1]) break; // l is index of // smallest element. int l = (i + 1) % n; // r is index of // largest element. int r = i; // Variable to store // count of number // of pairs. int cnt = 0; // Find sum of pair // formed by arr[l] // and arr[r] and // update l, r and // cnt accordingly. while (l != r) { // If we find a pair with // sum x, then increment // cnt, move l and r to // next element. if (arr[l] + arr[r] == x) { cnt++; // This condition is required // to be checked, otherwise // l and r will cross each // other and loop will never // terminate. if (l == (r - 1 + n) % n) { return cnt; } l = (l + 1) % n; r = (r - 1 + n) % n; } // If current pair sum // is less, move to // the higher sum side. else if (arr[l] + arr[r] < x) l = (l + 1) % n; // If current pair sum // is greater, move // to the lower sum side. else r = (n + r - 1) % n; } return cnt; } // Driver Code public static void main(String[] args) { int arr[] = { 11, 15, 6, 7, 9, 10 }; int X = 16; int N = arr.length; System.out.println(pairsInSortedRotated(arr, N, X)); } } // This code is contributed by ajit Python3 # Python program to find # number of pairs with # a given sum in a sorted # and rotated array. # This function returns # count of number of pairs # with sum equals to x. def pairsInSortedRotated(arr, n, x): # Find the pivot element. # Pivot element is largest # element of array. for i in range(n): if arr[i] > arr[i + 1]: break # l is index of # smallest element. l = (i + 1) % n # r is index of # largest element. r = i # Variable to store # count of number # of pairs. cnt = 0 # Find sum of pair # formed by arr[l] # and arr[r] and # update l, r and # cnt accordingly. while (l != r): # If we find a pair # with sum x, then # increment cnt, move # l and r to next element. if arr[l] + arr[r] == x: cnt += 1 # This condition is # required to be checked, # otherwise l and r will # cross each other and # loop will never terminate. if l == (r - 1 + n) % n: return cnt l = (l + 1) % n r = (r - 1 + n) % n # If current pair sum # is less, move to # the higher sum side. elif arr[l] + arr[r] < x: l = (l + 1) % n # If current pair sum # is greater, move to # the lower sum side. else: r = (n + r - 1) % n return cnt # Driver Code arr = [11, 15, 6, 7, 9, 10] X = 16 N = len(arr) print(pairsInSortedRotated(arr, N, X)) # This code is contributed by ChitraNayal C# // C# program to find // number of pairs with // a given sum in a sorted // and rotated array. using System; class GFG { // This function returns // count of number of pairs // with sum equals to x. static int pairsInSortedRotated(int[] arr, int n, int x) { // Find the pivot element. // Pivot element is largest // element of array. int i; for (i = 0; i < n - 1; i++) if (arr[i] > arr[i + 1]) break; // l is index of // smallest element. int l = (i + 1) % n; // r is index of // largest element. int r = i; // Variable to store // count of number // of pairs. int cnt = 0; // Find sum of pair // formed by arr[l] // and arr[r] and // update l, r and // cnt accordingly. while (l != r) { // If we find a pair with // sum x, then increment // cnt, move l and r to // next element. if (arr[l] + arr[r] == x) { cnt++; // This condition is required // to be checked, otherwise // l and r will cross each // other and loop will never // terminate. if (l == (r - 1 + n) % n) { return cnt; } l = (l + 1) % n; r = (r - 1 + n) % n; } // If current pair sum // is less, move to // the higher sum side. else if (arr[l] + arr[r] < x) l = (l + 1) % n; // If current pair sum // is greater, move // to the lower sum side. else r = (n + r - 1) % n; } return cnt; } // Driver Code static public void Main() { int[] arr = { 11, 15, 6, 7, 9, 10 }; int X = 16; int N = arr.Length; Console.WriteLine( pairsInSortedRotated(arr, N, X)); } } // This code is contributed by akt_mit PHP <?php // PHP program to find number // of pairs with a given sum // in a sorted and rotated array. // This function returns count // of number of pairs with sum // equals to x. function pairsInSortedRotated($arr, $n, $x) { // Find the pivot element. // Pivot element is largest // element of array. $i; for ($i = 0; $i < $n - 1; $i++) if ($arr[$i] > $arr[$i + 1]) break; // l is index of // smallest element. $l = ($i + 1) % $n; // r is index of // largest element. $r = $i; // Variable to store // count of number // of pairs. $cnt = 0; // Find sum of pair formed // by arr[l] and arr[r] and // update l, r and cnt // accordingly. while ($l != $r) { // If we find a pair with // sum x, then increment // cnt, move l and r to // next element. if ($arr[$l] + $arr[$r] == $x) { $cnt++; // This condition is required // to be checked, otherwise l // and r will cross each other // and loop will never terminate. if($l == ($r - 1 + $n) % $n) { return $cnt; } $l = ($l + 1) % $n; $r = ($r - 1 + $n) % $n; } // If current pair sum // is less, move to // the higher sum side. else if ($arr[$l] + $arr[$r] < $x) $l = ($l + 1) % $n; // If current pair sum // is greater, move to // the lower sum side. else $r = ($n + $r - 1) % $n; } return $cnt; } // Driver Code $arr = array(11, 15, 6, 7, 9, 10); $X = 16; $N = sizeof($arr) / sizeof($arr[0]); echo pairsInSortedRotated($arr, $N, $X); // This code is contributed by ajit ?> Javascript <script> // Javascript program to find // number of pairs with // a given sum in a sorted // and rotated array. // This function returns // count of number of pairs // with sum equals to x. function pairsInSortedRotated(arr, n, x) { // Find the pivot element. // Pivot element is largest // element of array. let i; for (i = 0; i < n - 1; i++) if (arr[i] > arr[i + 1]) break; // l is index of // smallest element. let l = (i + 1) % n; // r is index of // largest element. let r = i; // Variable to store // count of number // of pairs. let cnt = 0; // Find sum of pair // formed by arr[l] // and arr[r] and // update l, r and // cnt accordingly. while (l != r) { // If we find a pair with // sum x, then increment // cnt, move l and r to // next element. if (arr[l] + arr[r] == x) { cnt++; // This condition is required // to be checked, otherwise // l and r will cross each // other and loop will never // terminate. if(l == (r - 1 + n) % n) { return cnt; } l = (l + 1) % n; r = (r - 1 + n) % n; } // If current pair sum // is less, move to // the higher sum side. else if (arr[l] + arr[r] < x) l = (l + 1) % n; // If current pair sum // is greater, move // to the lower sum side. else r = (n + r - 1) % n; } return cnt; } // Driver Code let arr = [11, 15, 6, 7, 9, 10]; let X = 16; let N = arr.length; document.write(pairsInSortedRotated(arr, N, X)); // This code is contributed by rag2127 </script> Output 2 Time Complexity: O(N). As we are performing linear operations on an array. Auxiliary Space: O(1). As constant extra space is used. This method is suggested by Nikhil Jindal. My Personal Notes arrow_drop_up Save Like Previous Check if empty spaces of Array can be filled maintaining given relations of adjacent Next Maximum possible difference between two Subarrays after removing N elements from Array Recommended Articles Page : Circularly Sorted Array (Sorted and Rotated Array) 01, Jun 22 C Program for Given a sorted and rotated array, find if there is a pair with a given sum 30, Nov 21 C++ Program for Given a sorted and rotated array, find if there is a pair with a given sum 30, Nov 21 Java Program for Given a sorted and rotated array, find if there is a pair with a given sum 30, Oct 21 Count elements less than or equal to a given value in a sorted rotated array 15, Jun 17 Find if there is a pair with a given sum in the rotated sorted Array 30, Mar 15 Find the Rotation Count in Rotated Sorted array 01, Mar 17 Sort a Rotated Sorted Array 11, Oct 17 C# Program for Search an element in a sorted and rotated array 15, Nov 21 Check if an array is sorted and rotated using Binary Search 05, Mar 20 Javascript Program for Search an element in a sorted and rotated array 15, Nov 21 C++ Program for Search an element in a sorted and rotated array 15, Nov 21 Java Program for Search an element in a sorted and rotated array 15, Oct 21 Python3 Program for Search an element in a sorted and rotated array 15, Nov 21 Php Program for Search an element in a sorted and rotated array 15, Nov 21 C Program for Search an element in a sorted and rotated array 15, Nov 21 Check if an array is sorted and rotated 21, Sep 18 Maximum element in a sorted and rotated array 28, Mar 19 Php Program for Check if an array is sorted and rotated 21, Dec 21 Javascript Program for Check if an array is sorted and rotated 21, Dec 21 Java Program for Check if an array is sorted and rotated 21, Dec 21 C++ Program for Check if an array is sorted and rotated 21, Dec 21 Python3 Program for Check if an array is sorted and rotated 21, Dec 21 Search an element in a sorted and rotated array with duplicates 27, Jan 20 Article Contributed By : animeshdey @animeshdey Vote for difficulty Easy Normal Medium Hard Expert Article Tags : Binary Search Arrays Searching Practice Tags : Arrays Searching Binary Search Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New Practice Problems, POTD Streak, Weekly Contests & More! View Details Complete Interview Preparation- Self Paced Course View Details Data Structures & Algorithms- Self Paced Course View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register