https://www.geeksforgeeks.org/analysis-algorithm-set-5-amortized-analysis-introduction/?ref=ghm Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles ▲ Related Articles Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) View Discussion Improve Article Save Article Like Article Difficulty Level : Medium Last Updated : 13 Jul, 2022 Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst-case average time that is lower than the worst-case time of a particularly expensive operation. The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint Sets, and Splay Trees. Let us consider an example of simple hash table insertions. How do we decide on table size? There is a trade-off between space and time, if we make hash-table size big, search time becomes low, but the space required becomes high. The solution to this trade-off problem is to use Dynamic Table (or Arrays). The idea is to increase the size of the table whenever it becomes full. Following are the steps to follow when the table becomes full. 1) Allocate memory for larger table size, typically twice the old table. 2) Copy the contents of the old table to a new table. 3) Free the old table. If the table has space available, we simply insert a new item in the available space. What is the time complexity of n insertions using the above scheme? If we use simple analysis, the worst-case cost of insertion is O(n). Therefore, the worst-case cost of n inserts is n * O(n) which is O(n2). This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don’t take Θ(n) time. So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1) insertion time which is a great result used in hashing. Also, the concept of the dynamic table is used in vectors in C++ and ArrayList in Java. Following are a few important notes. 1) Amortized cost of a sequence of operations can be seen as expenses of a salaried person. The average monthly expense of the person is less than or equal to the salary, but the person can spend more money in a particular month by buying a car or something. In other months, he or she saves money for the expensive month. 2) The above Amortized Analysis was done for Dynamic Array example is called Aggregate Method. There are two more powerful ways to do Amortized analysis called Accounting Method and Potential Method. We will be discussing the other two methods in separate posts. 3) The amortized analysis doesn’t involve probability. There is also another different notion of average-case running time where algorithms use randomization to make them faster and the expected running time is faster than the worst-case running time. These algorithms are analyzed using Randomized Analysis. Examples of these algorithms are Randomized Quick Sort, Quick Select and Hashing. We will soon be covering Randomized analysis in a different post. Amortized analysis of insertion in Red-Black Tree Let us discuss the Amortized Analysis of Red-Black Tree operations (Insertion) using the Potential Method. To perform the amortized analysis of the Red-Black Tree Insertion operation, we use the Potential(or Physicist’s) method. For the potential method, we define a potential function that maps a data structure to a non-negative real value. An operation can result in a change of this potential. Let us define the potential function in the following manner: (1) where n is a node of Red-Black Tree Potential function = ,over all nodes of the red black tree. Further, we define the amortized time of an operation as: Amortized time= c + (h) (h)= (h’) – (h) where h and h’ are the states of the Red-Black Tree before and after the operation respectively c is the actual cost of the operation The change in potential should be positive for low-cost operations and negative for high-cost operations. A new node is inserted on a leaf of a red-black tree. We have the leaves of a red-black tree of any one of the following types: The insertions and their amortized analysis can be represented as: (1) This insertion is performed by first recoloring the parent and the other sibling(red). Then the grandparent and uncle of that leaf node are considered for further recoloring which leads to the amortized cost to be -1(when the grandparent of the leaf node is red), -2 (when uncle of the leaf is black and the grandparent is black) or +1 (when uncle of the leaf is red and grandparent is black). The insertion can be shown as: (2) In this insertion, the node is inserted without any changes as the black depth of the leaves remains the same. This is the case when the leaf may have a black sibling or does not have any sibling (since we consider the color of the color of null node to be black). So, the amortized cost of this insertion is 0. (3) In this insertion, we cannot recolor the leaf node, its parent, and the sibling such that the black depth stays the same as before. So, we need to perform a Left- Left rotation. After rotation, there are no changes when the grandparent of g(the inserted node) is black. Also, for the case of the Red Grandparent of g(the inserted node), we do not have any changes. So, the insertion is completed with amortized cost= +2. The insertion has been depicted below: After calculating these particular amortized costs at the leaf site of a red-black tree we can discuss the nature of the total amortized cost of insertion in a red-black tree. Since this may happen that two red nodes may have a parent-child relationship till the root of the red-black tree. So in the extreme(or corner) case, we reduce the number of black nodes with two red children by 1, and we at most increase the number of black nodes with no red children by 1, leaving a net loss of at most 1 to the potential function. Since one unit of potential pays for each operation therefore (h) n where n is the total number of nodes Thus, the total amortized cost of insertion in the Red-Black Tree is O(n). For any doubts regarding insertions in a red-black tree, you may refer to Insertions in Red-Black Tree. For more details, please refer: Design and Analysis of Algorithms. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Like Previous Analysis of Algorithm | Set 4 (Solving Recurrences) Recommended Articles Page : Amortized analysis for increment in counter 23, Mar 18 Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Set 1 (Asymptotic Analysis) 03, Jan 12 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 Analysis of Algorithms | Big-O analysis 28, Feb 18 What is algorithm and why analysis of it is important? 12, Jan 21 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 3 (Asymptotic Notations) 26, Oct 13 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Algorithm Practice Question for Beginners | Set 1 08, Nov 14 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Analysis of different sorting techniques 29, Jan 18 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Guidelines for asymptotic analysis 27, May 21 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 Prune-and-Search | A Complexity Analysis Overview 19, Jul 21 Difference between Posteriori and Priori analysis 07, Aug 19 Analysis of algorithms | little o and little omega notations 14, Aug 17 Complexity Analysis of Binary Search 29, May 19 Analysis of Algorithms | Big - Ω (Big- Omega) Notation 11, Jul 21 Examples of Big-O analysis 23, Nov 20 Analysis of Algorithms | Big - Θ (Big Theta) Notation 11, Jul 21 Practice Questions on Time Complexity Analysis 12, Dec 17 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Medium Easy Normal Medium Hard Expert Improved By : ashwinikumar43215 nishantproductive santhosh1161999 shreelakshmijoshi1 Article Tags : Complexity-analysis Algorithms Analysis Practice Tags : Algorithms Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New DSA Live Classes for Working Professionals View Details Practice Problems, POTD Streak, Weekly Contests & More! View Details Complete Interview Preparation- Self Paced Course View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register