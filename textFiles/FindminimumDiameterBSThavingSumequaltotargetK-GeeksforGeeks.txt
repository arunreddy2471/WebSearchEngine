https://www.geeksforgeeks.org/find-minimum-diameter-bst-having-sum-equal-to-target-k/ Find minimum Diameter BST having Sum equal to target K - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles â–² Related Articles Binary Search Tree | Set 1 (Search and Insertion) AVL Tree | Set 1 (Insertion) Binary Search Tree | Set 2 (Delete) A program to check if a binary tree is BST or not Construct BST from given preorder traversal | Set 1 Sorted Array to Balanced BST Inorder Successor in Binary Search Tree Lowest Common Ancestor in a Binary Search Tree. Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Red-Black Tree | Set 2 (Insert) Convert a normal BST to Balanced BST Optimal Binary Search Tree | DP-24 Find the node with minimum value in a Binary Search Tree Find k-th smallest element in BST (Order Statistics in BST) Inorder predecessor and successor for a given key in BST Total number of possible Binary Search Trees and Binary Trees with n keys Advantages of BST over Hash Table Insert a node in Binary Search Tree Iteratively Merge Two Balanced Binary Search Trees Check if a given array can represent Preorder Traversal of Binary Search Tree Binary Tree to Binary Search Tree Conversion Difference between Binary Tree and Binary Search Tree Sorted Linked List to Balanced BST Two nodes of a BST are swapped, correct the BST Find a pair with given sum in a Balanced BST K'th largest element in a stream C Program for Red Black Tree Insertion How to handle duplicates in Binary Search Tree? Find postorder traversal of BST from preorder traversal set vs unordered_set in C++ STL Binary Search Tree | Set 1 (Search and Insertion) AVL Tree | Set 1 (Insertion) Binary Search Tree | Set 2 (Delete) A program to check if a binary tree is BST or not Construct BST from given preorder traversal | Set 1 Sorted Array to Balanced BST Inorder Successor in Binary Search Tree Lowest Common Ancestor in a Binary Search Tree. Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Red-Black Tree | Set 2 (Insert) Convert a normal BST to Balanced BST Optimal Binary Search Tree | DP-24 Find the node with minimum value in a Binary Search Tree Find k-th smallest element in BST (Order Statistics in BST) Inorder predecessor and successor for a given key in BST Total number of possible Binary Search Trees and Binary Trees with n keys Advantages of BST over Hash Table Insert a node in Binary Search Tree Iteratively Merge Two Balanced Binary Search Trees Check if a given array can represent Preorder Traversal of Binary Search Tree Binary Tree to Binary Search Tree Conversion Difference between Binary Tree and Binary Search Tree Sorted Linked List to Balanced BST Two nodes of a BST are swapped, correct the BST Find a pair with given sum in a Balanced BST K'th largest element in a stream C Program for Red Black Tree Insertion How to handle duplicates in Binary Search Tree? Find postorder traversal of BST from preorder traversal set vs unordered_set in C++ STL Find minimum Diameter BST having Sum equal to target K View Discussion Improve Article Save Article Like Article Last Updated : 29 Jul, 2022 Given a binary tree and a target K, the task is to find the diameter of the minimum subtree having sum equal to K which is also a binary search tree. Return -1 if not possible. Examples: Input: K = 38 13 / \ 5 23 / \ / \ N 17 N N / \ 16 N Output: 3 Explanation: 5, 17, 16 is the smallest subtree with diameter 3. Input: K = 73 7 / \ N 23 / \ 10 23 / \ / \ N 17 N N Output: -1 Explanation: No subtree is BST for the given target. Approach: This problem can be solved using the idea of Dynamic Programming on Trees. Store the sum and diameter of every subtree and check if a subtree with sum K is also a binary search tree or not. The following steps can be taken to solve this problem: Create Hash tables to store the sum of the subtree, diameter of subtree, min value of subtree, and max value of subtree. Initialize the answer as infinity. Now store all values in the hash tables and check if the given binary tree is a BST using Depth-first traversal. During the traversal, only the hash tables will be filled. For a binary to be a BST following 3 conditions must be satisfied: Left and right subtree must be BST. Max value of left subtree < value of the current node Min value of right subtree > value of the current node Below is the implementation of the above approach: C++ // C++ code to implement this approach #include <bits/stdc++.h> using namespace std; // Structure of node of tree struct Node { int data; Node* left; Node* right; Node(int num) { data = num; left = NULL; right = NULL; } }; int target, ans; // Hash Tables to store Minimum value, Maximum Value, // diameter of subtree and sum of elements of subtree unordered_map<Node *, int> minv, maxv, h, sum; // Function to check if the tree is a BST or not bool isBST(Node* root) { // Base condition if (root == NULL) return true; if (root->left == NULL and root->right == NULL) { minv[root] = root->data; maxv[root] = root->data; h[root] = 1; sum[root] = root->data; if (sum[root] == target) ans = min(ans, h[root]); return true; } // Condition for Binary tree to be a BST if (root->left == NULL) { if (isBST(root->right) and minv[root->right] > root->data) { minv[root] = root->data; maxv[root] = maxv[root->right]; h[root] = h[root->right] + 1; sum[root] = sum[root->right] + root->data; if (sum[root] == target) ans = min(ans, h[root]); return true; } return false; } if (root->right == NULL) { if (isBST(root->left) and maxv[root->left] < root->data) { minv[root] = minv[root->left]; maxv[root] = root->data; h[root] = h[root->left] + 1; sum[root] = sum[root->left] + root->data; if (sum[root] == target) ans = min(ans, h[root]); return true; } return false; } bool bstleft = isBST(root->left); bool bstright = isBST(root->right); if (bstleft and bstright and maxv[root->left] < root->data and minv[root->right] > root->data) { minv[root] = minv[root->left]; maxv[root] = maxv[root->right]; h[root] = 1 + h[root->left] + h[root->right]; sum[root] = root->data + sum[root->left] + sum[root->right]; if (sum[root] == target) ans = min(ans, h[root]); return true; } return false; } // Function to find the desired subtree int minSubtreeSumBST(int k, Node* root) { // Initialize answer as infinity(INT_MAX) ans = INT_MAX; target = k; // check for BST using DFS traversal isBST(root); if (ans == INT_MAX) return -1; return ans; } // Driver code int main() { int k = 38; // Defining tree Node* root = new Node(13); root->left = new Node(5); root->right = new Node(23); root->left->right = new Node(17); root->left->right->left = new Node(16); // Function call int res = minSubtreeSumBST(k, root); cout << res << endl; return 0; } Output 3 Time Complexity: O(N) Auxiliary Space: O(N) My Personal Notes arrow_drop_up Save Like Previous Count of Subsets with given Difference Recommended Articles Page : Find k-th smallest element in BST (Order Statistics in BST) 15, Feb 11 Two nodes of a BST are swapped, correct the BST | Set-2 12, Jun 19 Convert a normal BST to Balanced BST 01, May 16 Two nodes of a BST are swapped, correct the BST 14, Sep 12 K'th Largest Element in BST when modification to BST is not allowed 19, Mar 15 Finding the lexicographically smallest diameter in a binary tree 03, Dec 19 DP on Trees | Set-3 ( Diameter of N-ary Tree ) 11, Feb 19 Maximum sum subarray having sum less than or equal to given sum using Set 22, Apr 20 Root to leaf path sum equal to a given number in BST 17, Sep 18 Minimum steps to reach target by a Knight | Set 2 23, Jul 18 Find the minimum absolute difference in two different BST's 02, Jul 19 Sum of nodes within K distance from target 12, Apr 22 Number of ways to select equal sized subarrays from two arrays having atleast K equal pairs of elements 06, May 20 Smallest number in BST which is greater than or equal to N 13, Jun 18 Largest number in BST which is less than or equal to N 05, Jul 17 Largest number less than or equal to N in BST (Iterative Approach) 13, Nov 17 Find a pair with given sum in BST 07, Jan 18 Find a pair with given sum in a Balanced BST 10, Mar 13 Count pairs of nodes having minimum distance between them equal to the difference of their distances from root 23, Feb 21 Pair with minimum absolute difference | BST 01, Jul 19 Count of subarrays having sum equal to its length 19, Aug 20 Count of subarrays having sum equal to its length | Set 2 27, Oct 20 Count ways to split array into two subsets having difference between their sum equal to K 09, Jun 21 Count N-digit numbers having sum of digits equal to a Prime Number 23, Jul 21 Article Contributed By : ishankhandelwals @ishankhandelwals Vote for difficulty Easy Normal Medium Hard Expert Article Tags : Binary Tree Binary Search Tree Dynamic Programming Practice Tags : Dynamic Programming Binary Search Tree Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation- Self Paced Course View Details Practice Problems, POTD Streak, Weekly Contests & More! View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register