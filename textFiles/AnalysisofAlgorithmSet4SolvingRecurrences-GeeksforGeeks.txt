https://www.geeksforgeeks.org/analysis-algorithm-set-4-master-method-solving-recurrences/?ref=ghm Analysis of Algorithm | Set 4 (Solving Recurrences) - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles ▲ Related Articles Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Analysis of Algorithm | Set 4 (Solving Recurrences) View Discussion Improve Article Save Article Like Article Difficulty Level : Medium Last Updated : 13 Jul, 2022 In the previous post, we discussed the analysis of loops. Many algorithms are recursive. When we analyze them, we get a recurrence relation for time complexity. We get running time on an input of size n as a function of n and the running time on inputs of smaller sizes. For example in Merge Sort, to sort a given array, we divide it into two halves and recursively repeat the process for the two halves. Finally, we merge the results. Time complexity of Merge Sort can be written as T(n) = 2T(n/2) + cn. There are many other algorithms like Binary Search, Tower of Hanoi, etc. There are mainly three ways of solving recurrences. 1) Substitution Method: We make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. For example consider the recurrence T(n) = 2T(n/2) + n

We guess the solution as T(n) = O(nLogn). Now we use induction
to prove our guess.

We need to prove that T(n) <= cnLogn. We can assume that it is true
for values smaller than n.

T(n) = 2T(n/2) + n
    <= 2cn/2Log(n/2) + n
    =  cnLogn - cnLog2 + n
    =  cnLogn - cn + n
    <= cnLogn 2) Recurrence Tree Method: In this method, we draw a recurrence tree and calculate the time taken by every level of the tree. Finally, we sum the work done at all levels. To draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. The pattern is typically arithmetic or geometric series. For example, consider the recurrence relation 
T(n) = T(n/4) + T(n/2) + cn2

           cn2
         /      \
     T(n/4)     T(n/2)

If we further break down the expression T(n/4) and T(n/2), 
we get the following recursion tree.

                cn2
           /           \      
       c(n2)/16      c(n2)/4
      /      \          /     \
  T(n/16)     T(n/8)  T(n/8)    T(n/4) 
Breaking down further gives us following
                 cn2
            /            \      
       c(n2)/16          c(n2)/4
       /      \            /      \
c(n2)/256   c(n2)/64  c(n2)/64    c(n2)/16
 /    \      /    \    /    \       /    \  

To know the value of T(n), we need to calculate the sum of tree 
nodes level by level. If we sum the above tree level by level, 
we get the following series
T(n)  = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + ....
The above series is a geometrical progression with a ratio of 5/16.

To get an upper bound, we can sum the infinite series. 
We get the sum as (n2)/(1 - 5/16) which is O(n2) 3) Master Method: Master Method is a direct way to get the solution. The master method works only for the following type of recurrences or for recurrences that can be transformed into the following type. T(n) = aT(n/b) + f(n) where a >= 1 and b > 1 There are following three cases: 1. If f(n) = O(nc) where c < Logba then T(n) = Θ(nLogba) 2. If f(n) = Θ(nc) where c = Logba then T(n) = Θ(ncLog n) 3.If f(n) = Ω(nc) where c > Logba then T(n) = Θ(f(n)) How does this work? The master method is mainly derived from the recurrence tree method. If we draw the recurrence tree of T(n) = aT(n/b) + f(n), we can see that the work done at the root is f(n), and work done at all leaves is Θ(nc) where c is Logba. And the height of the recurrence tree is Logbn In the recurrence tree method, we calculate the total work done. If the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (Case 1). If work done at leaves and root is asymptotically the same, then our result becomes height multiplied by work done at any level (Case 2). If work done at the root is asymptotically more, then our result becomes work done at the root (Case 3). Examples of some standard algorithms whose time complexity can be evaluated using the Master Method Merge Sort: T(n) = 2T(n/2) + Θ(n). It falls in case 2 as c is 1 and Logba] is also 1. So the solution is Θ(n Logn) Binary Search: T(n) = T(n/2) + Θ(1). It also falls in case 2 as c is 0 and Logba is also 0. So the solution is Θ(Logn) Notes: 1) It is not necessary that a recurrence of the form T(n) = aT(n/b) + f(n) can be solved using Master Theorem. The given three cases have some gaps between them. For example, the recurrence T(n) = 2T(n/2) + n/Logn cannot be solved using master method. 2) Case 2 can be extended for f(n) = Θ(ncLogkn) If f(n) = Θ(ncLogkn) for some constant k >= 0 and c = Logba, then T(n) = Θ(ncLogk+1n) For more details, please refer: Design and Analysis of Algorithms. Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above My Personal Notes arrow_drop_up Save Like Previous Analysis of Algorithms | Set 4 (Analysis of Loops) Next Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Recommended Articles Page : Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) 23, Sep 14 Algorithms | Recurrences | Set 1 27, Dec 18 Algorithms Sample Questions | Recurrences | Set 2 27, May 19 Master Theorem For Subtract and Conquer Recurrences 12, Jul 17 Advanced master theorem for divide and conquer recurrences 17, Apr 18 Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Set 1 (Asymptotic Analysis) 03, Jan 12 Analysis of Algorithms | Big-O analysis 28, Feb 18 What is algorithm and why analysis of it is important? 12, Jan 21 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 3 (Asymptotic Notations) 26, Oct 13 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Analysis of different sorting techniques 29, Jan 18 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Amortized analysis for increment in counter 23, Mar 18 Guidelines for asymptotic analysis 27, May 21 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 Prune-and-Search | A Complexity Analysis Overview 19, Jul 21 Difference between Posteriori and Priori analysis 07, Aug 19 Analysis of algorithms | little o and little omega notations 14, Aug 17 Complexity Analysis of Binary Search 29, May 19 Analysis of Algorithms | Big - Ω (Big- Omega) Notation 11, Jul 21 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Medium Easy Normal Medium Hard Expert Improved By : Manish Dhanuka animagussirius7 pragatpandya shreelakshmijoshi1 Article Tags : Complexity-analysis Algorithms Analysis Practice Tags : Algorithms Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New DSA Live Classes for Working Professionals View Details Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation- Self Paced Course View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register