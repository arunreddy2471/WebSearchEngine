https://www.geeksforgeeks.org/analysis-of-algorithms-set-3asymptotic-notations/?ref=ghm Analysis of Algorithms | Set 3 (Asymptotic Notations) - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles ▲ Related Articles Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Analysis of Algorithms | Set 3 (Asymptotic Notations) View Discussion Improve Article Save Article Like Article Difficulty Level : Easy Last Updated : 13 Jul, 2022 We have discussed Asymptotic Analysis, and Worst, Average, and Best Cases of Algorithms. The main idea of asymptotic analysis is to have a measure of the efficiency of algorithms that don’t depend on machine-specific constants and don’t require algorithms to be implemented and time taken by programs to be compared. Asymptotic notations are mathematical tools to represent the time complexity of algorithms for asymptotic analysis. The following 3 asymptotic notations are mostly used to represent the time complexity of algorithms. 1) Θ Notation: The theta notation bounds a function from above and below, so it defines exact asymptotic behavior. A simple way to get the Theta notation of an expression is to drop low-order terms and ignore leading constants. For example, consider the following expression. 3n3 + 6n2 + 6000 = Θ(n3) Dropping lower order terms is always fine because there will always be a number(n) after which Θ(n3) has higher values than Θ(n2) irrespective of the constants involved. For a given function g(n), we denote Θ(g(n)) is following set of functions. Θ(g(n)) = {f(n): there exist positive constants c1, c2 and n0 such 
                 that 0 <= c1*g(n) <= f(n) <= c2*g(n) for all n >= n0} The above definition means, if f(n) is theta of g(n), then the value f(n) is always between c1*g(n) and c2*g(n) for large values of n (n >= n0). The definition of theta also requires that f(n) must be non-negative for values of n greater than n0. Examples : { 100 , log (2000) , 10^4 } belongs to Θ(1) { (n/4) , (2n+3) , (n/100 + log(n)) } belongs to Θ(n) { (n^2+n) , (2n^2) , (n^2+log(n))} belongs to Θ( n^2) Θ provides exact bounds . 2) Big O Notation: The Big O notation defines an upper bound of an algorithm, it bounds a function only from above. For example, consider the case of Insertion Sort. It takes linear time in the best case and quadratic time in the worst case. We can safely say that the time complexity of Insertion sort is O(n^2). Note that O(n^2) also covers linear time. If we use Θ notation to represent time complexity of Insertion sort, we have to use two statements for best and worst cases: 1. The worst-case time complexity of Insertion Sort is Θ(n^2). 2. The best case time complexity of Insertion Sort is Θ(n). The Big O notation is useful when we only have an upper bound on the time complexity of an algorithm. Many times we easily find an upper bound by simply looking at the algorithm. O(g(n)) = { f(n): there exist positive constants c and 
                  n0 such that 0 <= f(n) <= c*g(n) for 
                  all n >= n0} Examples : { 100 , log (2000) , 10^4 } belongs to O(1) U { (n/4) , (2n+3) , (n/100 + log(n)) } belongs to O(n) U { (n^2+n) , (2n^2) , (n^2+log(n))} belongs to O( n^2) Here U represents union , we can write it in these manner because O provides exact or upper bounds . 3) Ω Notation: Just as Big O notation provides an asymptotic upper bound on a function, Ω notation provides an asymptotic lower bound. Ω Notation can be useful when we have a lower bound on the time complexity of an algorithm. As discussed in the previous post, the best case performance of an algorithm is generally not useful, the Omega notation is the least used notation among all three. For a given function g(n), we denote by Ω(g(n)) the set of functions. Ω (g(n)) = {f(n): there exist positive constants c and
                  n0 such that 0 <= c*g(n) <= f(n) for
                  all n >= n0}. Let us consider the same Insertion sort example here. The time complexity of Insertion Sort can be written as Ω(n), but it is not very useful information about insertion sort, as we are generally interested in worst-case and sometimes in the average case. Examples : { (n^2+n) , (2n^2) , (n^2+log(n))} belongs to Ω( n^2) U { (n/4) , (2n+3) , (n/100 + log(n)) } belongs to Ω(n) U { 100 , log (2000) , 10^4 } belongs to Ω(1) Here U represents union , we can write it in these manner because Ω provides exact or lower bounds . Properties of Asymptotic Notations : As we have gone through the definition of these three notations let’s now discuss some important properties of those notations. 1. General Properties : If f(n) is O(g(n)) then a*f(n) is also O(g(n)) ; where a is a constant. Example: f(n) = 2n²+5 is O(n²) then 7*f(n) = 7(2n²+5) = 14n²+35 is also O(n²) . Similarly, this property satisfies both Θ and Ω notation. We can say If f(n) is Θ(g(n)) then a*f(n) is also Θ(g(n)) ; where a is a constant. If f(n) is Ω (g(n)) then a*f(n) is also Ω (g(n)) ; where a is a constant. 2. Transitive Properties : If f(n) is O(g(n)) and g(n) is O(h(n)) then f(n) = O(h(n)) . Example: if f(n) = n, g(n) = n² and h(n)=n³ n is O(n²) and n² is O(n³) then n is O(n³) Similarly, this property satisfies both Θ and Ω notation. We can say If f(n) is Θ(g(n)) and g(n) is Θ(h(n)) then f(n) = Θ(h(n)) . If f(n) is Ω (g(n)) and g(n) is Ω (h(n)) then f(n) = Ω (h(n)) 3. Reflexive Properties : Reflexive properties are always easy to understand after transitive. If f(n) is given then f(n) is O(f(n)). Since MAXIMUM VALUE OF f(n) will be f(n) ITSELF ! Hence x = f(n) and y = O(f(n) tie themselves in reflexive relation always. Example: f(n) = n² ; O(n²) i.e O(f(n)) Similarly, this property satisfies both Θ and Ω notation. We can say that: If f(n) is given then f(n) is Θ(f(n)). If f(n) is given then f(n) is Ω (f(n)). 4. Symmetric Properties : If f(n) is Θ(g(n)) then g(n) is Θ(f(n)) . Example: f(n) = n² and g(n) = n² then f(n) = Θ(n²) and g(n) = Θ(n²) This property only satisfies for Θ notation. 5. Transpose Symmetric Properties : If f(n) is O(g(n)) then g(n) is Ω (f(n)). Example: f(n) = n , g(n) = n² then n is O(n²) and n² is Ω (n) This property only satisfies O and Ω notations. 6. Some More Properties : 1.) If f(n) = O(g(n)) and f(n) = Ω(g(n)) then f(n) = Θ(g(n)) 2.) If f(n) = O(g(n)) and d(n)=O(e(n)) then f(n) + d(n) = O( max( g(n), e(n) )) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) + d(n) = n + n² i.e O(n²) 3.) If f(n)=O(g(n)) and d(n)=O(e(n)) then f(n) * d(n) = O( g(n) * e(n) ) Example: f(n) = n i.e O(n) d(n) = n² i.e O(n²) then f(n) * d(n) = n * n² = n³ i.e O(n³) _______________________________________________________________________________ Note :
If  f(n) = O(g(n)) then g(n) = Ω(f(n))  Exercise: Which of the following statements is/are valid? 1. Time Complexity of QuickSort is Θ(n^2) 2. Time Complexity of QuickSort is O(n^2) 3. For any two functions f(n) and g(n), we have f(n) = Θ(g(n)) if and only if f(n) = O(g(n)) and f(n) = Ω(g(n)). 4. Time complexity of all computer algorithms can be written as Ω(1) Important Links : There are two more notations called little o and little omega. Little o provides a strict upper bound (equality condition is removed from Big O) and little omega provides strict lower bound (equality condition removed from big omega) Analysis of Algorithms | Set 4 (Analysis of Loops) Recent Articles on analysis of algorithm. For more details, please refer: Design and Analysis of Algorithms. This article is contributed by Abhay Rathi. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Like Previous Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Next Analysis of Algorithms | Set 4 (Analysis of Loops) Recommended Articles Page : Analysis of Algorithms | Set 1 (Asymptotic Analysis) 03, Jan 12 Properties of Asymptotic Notations 06, Sep 19 Asymptotic Notations and how to calculate them 11, Jul 21 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Analysis of algorithms | little o and little omega notations 14, Aug 17 Guidelines for asymptotic analysis 27, May 21 Analysis of Algorithms | Set 4 (Analysis of Loops) 11, Feb 14 Analysis of Algorithms | Big-O analysis 28, Feb 18 Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) 23, Sep 14 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Analysis of Algorithms | Big - Ω (Big- Omega) Notation 11, Jul 21 Analysis of Algorithms | Big - Θ (Big Theta) Notation 11, Jul 21 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 Analysis of different sorting techniques 29, Jan 18 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Amortized analysis for increment in counter 23, Mar 18 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 Prune-and-Search | A Complexity Analysis Overview 19, Jul 21 Difference between Posteriori and Priori analysis 07, Aug 19 What is algorithm and why analysis of it is important? 12, Jan 21 Complexity Analysis of Binary Search 29, May 19 Examples of Big-O analysis 23, Nov 20 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Easy Easy Normal Medium Hard Expert Improved By : OmkarJai AmiyaRanjanRout kaustubh765 skmodi20bce2835 23603vaibhav2021 suruchikumarimfp4 Article Tags : Complexity-analysis Algorithms Analysis Articles Practice Tags : Algorithms Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New DSA Live Classes for Working Professionals View Details Practice Problems, POTD Streak, Weekly Contests & More! View Details Complete Interview Preparation- Self Paced Course View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register