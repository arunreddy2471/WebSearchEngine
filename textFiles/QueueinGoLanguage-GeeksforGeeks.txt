https://www.geeksforgeeks.org/queue-in-go-language/ Queue in Go Language - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles â–² Related Articles Different ways to concatenate two strings in Golang time.Sleep() Function in Golang With Examples Different ways to compare Strings in Golang strings.Contains Function in Golang with Examples Time Formatting in Golang fmt.Sprintf() Function in Golang With Examples strings.Replace() Function in Golang With Examples Top 5 Golang Frameworks in 2020 How to convert a string in lower case in Golang? How to Split a String in Golang? Arrays in Go How to compare times in Golang? Inheritance in GoLang Different Ways to Find the Type of Variable in Golang How to Replace Characters in Golang String? How to Take Input from the User in Golang? Interfaces in Golang Slices in Golang How to Trim a String in Golang? Go Programming Language (Introduction) How to Assign Default Value for Struct Field in Golang? Golang Maps Data Types in Go How to copy one slice into another slice in Golang? strings.Join() Function in Golang With Examples Channel in Golang Pointers in Golang How to convert Int data type to Float in Golang? How to Delete or Remove a File in Golang? Anonymous function in Go Language Different ways to concatenate two strings in Golang time.Sleep() Function in Golang With Examples Different ways to compare Strings in Golang strings.Contains Function in Golang with Examples Time Formatting in Golang fmt.Sprintf() Function in Golang With Examples strings.Replace() Function in Golang With Examples Top 5 Golang Frameworks in 2020 How to convert a string in lower case in Golang? How to Split a String in Golang? Arrays in Go How to compare times in Golang? Inheritance in GoLang Different Ways to Find the Type of Variable in Golang How to Replace Characters in Golang String? How to Take Input from the User in Golang? Interfaces in Golang Slices in Golang How to Trim a String in Golang? Go Programming Language (Introduction) How to Assign Default Value for Struct Field in Golang? Golang Maps Data Types in Go How to copy one slice into another slice in Golang? strings.Join() Function in Golang With Examples Channel in Golang Pointers in Golang How to convert Int data type to Float in Golang? How to Delete or Remove a File in Golang? Anonymous function in Go Language Queue in Go Language View Discussion Improve Article Save Article Like Article Difficulty Level : Medium Last Updated : 29 Jul, 2022 A queue is a linear structure that follows a particular order in which the operations are performed. The order is First In First Out (FIFO). Now if you are familiar with other programming languages like C++, Java, and Python then there are inbuilt queue libraries that can be used for the implementation of queues, but such is not the case in the case of Golang. Even if you are not familiar with those then just know that Golang does not provide an inbuilt queue structure. How to implement Queue in Go Language? There are many ways to implement queues in Golang using other Data structures as: Using Slices Using Structures Using LinkList 1. Implement Queue Using Slices in Go Language: Implementing queue using a simple slice in which enqueueing and dequeuing operations are done using functions. and Underflow(queue is empty) is checked during dequeuing operation. Go package main import "fmt" func enqueue(queue []int, element int) []int { queue = append(queue, element) // Simply append to enqueue. fmt.Println("Enqueued:", element) return queue } func dequeue(queue []int) (int, []int) { element := queue[0] // The first element is the one to be dequeued. if len(queue) == 1 { var tmp = []int{} return element, tmp } return element, queue[1:] // Slice off the element once it is dequeued. } func main() { var queue = make([]int, 0) queue = enqueue(queue, 10) fmt.Println("After pushing 10 ", queue) queue = enqueue(queue, 20) fmt.Println("After pushing 20 ", queue) queue = enqueue(queue, 30) fmt.Println("After pushing 30 ", queue) ele, queue := dequeue(queue) fmt.Println("Queue After removing", ele, " :", queue) queue = enqueue(queue, 40) fmt.Println("After pushing 40 ", queue) } Output:
Enqueued: 10
After pushing 10  [10]
Enqueued: 20
After pushing 20  [10 20]
Enqueued: 30
After pushing 30  [10 20 30]
Queue After removing 10  : [20 30]
Enqueued: 40
After pushing 40  [20 30 40] Note: In this, the problem is we can not define the size or capacity of the queue. However, it can be done by defining the queue as make([]int, 0, 10) where the third parameter determines capacity but the problem arises when capacity dynamically increases in an overflow condition. 2. Using Structures: To overcome the problem in the earlier one, use Structures instead which consist of Elements i.e. queue Elements Size i.e. Capacity of Use Pointers to directly change the queue without returning it every time and, check for both overflow and underflow conditions: Go package main import ( "errors" "fmt" ) type Queue struct { Elements []int Size int } func (q *Queue) Enqueue(elem int) { if q.GetLength() == q.Size { fmt.Println("Overflow") return } q.Elements = append(q.Elements, elem) } func (q *Queue) Dequeue() int { if q.IsEmpty() { fmt.Println("UnderFlow") return 0 } element := q.Elements[0] if q.GetLength() == 1 { q.Elements = nil return element } q.Elements = q.Elements[1:] return element // Slice off the element once it is dequeued. } func (q *Queue) GetLength() int { return len(q.Elements) } func (q *Queue) IsEmpty() bool { return len(q.Elements) == 0 } func (q *Queue) Peek() (int, error) { if q.IsEmpty() { return 0, errors.New("empty queue") } return q.Elements[0], nil } func main() { queue := Queue{Size: 3} fmt.Println(queue.Elements) queue.Enqueue(1) fmt.Println(queue.Elements) queue.Enqueue(2) fmt.Println(queue.Elements) queue.Enqueue(3) fmt.Println(queue.Elements) queue.Enqueue(5) fmt.Println(queue.Elements) elem := queue.Dequeue() fmt.Println(elem) fmt.Println(queue.Elements) queue.Enqueue(9) fmt.Println(queue.Elements) elem = queue.Dequeue() fmt.Println(elem) fmt.Println(queue.Elements) } Output:
[]
[1]
[1 2]
[1 2 3]
Overflow
[1 2 3]
1
[2 3]
[2 3 9]
2
[3 9] Note: We used to compare the length of elements to the size(Capacity defined) of queue structure which is more good to use. 3. Using LinkList: Go package main import "container/list" import "fmt" func main() { // new linked list queue := list.New() // Simply append to enqueue. queue.PushBack(10) queue.PushBack(20) queue.PushBack(30) // Dequeue front:=queue.Front() fmt.Println(front.Value) queue.Remove(front) } Output:
10 Note: In this also the capacity problem arises and to overcome that, there is a need to initialize a different variable and compare the length of the LinkList before every pushback. My Personal Notes arrow_drop_up Save Like Previous Top Data Structures That Every Programmer Must Know Recommended Articles Page : Stack and Queue in Python using queue Module 19, Jan 18 Difference between Circular Queue and Priority Queue 27, Aug 20 Advantages of circular queue over linear queue 15, Mar 21 Difference Between Linear Queue and Circular Queue 06, Jan 21 Reversing a Queue using another Queue 04, Sep 19 Check if a queue can be sorted into another queue using a stack 09, May 18 What is Priority Queue | Introduction to Priority Queue 02, Jul 14 Applications of Priority Queue 14, May 17 Sharing a queue among three threads 27, Feb 18 How to Implement Queue in Java using Array and Generics? 09, Apr 21 Interleave the first half of the queue with second half 28, May 18 Level order traversal in spiral form | Using one stack and one queue 19, Jul 18 Check if Queue Elements are pairwise consecutive 13, Oct 18 Check if Queue Elements are pairwise consecutive | Set-2 15, Oct 18 Difference between a Static Queue and a Singly Linked List 20, Nov 18 Sort the Queue using Recursion 12, Jul 19 Reverse tree path using Queue 16, Jul 19 Python | Queue using Doubly Linked List 31, Jul 19 Priority Queue of Vectors in C++ STL with Examples 17, Mar 20 Queue of Pairs in C++ STL with Examples 06, Apr 20 CPU Scheduling in Operating Systems using priority queue with gantt chart 14, Apr 20 Append the elements of queue in mirror-inverse order 08, May 20 Restore a shuffled Queue as per given Conditions 31, Jul 20 Priority queue of pairs in C++ with ordering by first and second element 22, May 20 Article Contributed By : anantjain28 @anantjain28 Vote for difficulty Current difficulty : Medium Easy Normal Medium Hard Expert Article Tags : Go Language Linked List Queue Practice Tags : Linked List Queue Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation- Self Paced Course View Details Practice Problems, POTD Streak, Weekly Contests & More! View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register