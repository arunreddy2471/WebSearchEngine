https://www.geeksforgeeks.org/analysis-of-algorithms-set-4-analysis-of-loops/?ref=ghm Analysis of Algorithms | Set 4 (Analysis of Loops) - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles ▲ Related Articles Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Algorithms What is Algorithm | Introduction to Algorithms What is an Algorithm? Definition, Types, Complexity, Examples Algorithms Design Techniques What is algorithm and why analysis of it is important? Analysis of Algorithms Analysis of Algorithms | Set 1 (Asymptotic Analysis) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) Types of Algorithms Sorting Algorithms Searching Algorithms Greedy Algorithms Dynamic Programming Pattern Searching Backtracking Algorithms Divide and Conquer Mathematical Algorithms Geometric Algorithms Bitwise Algorithms Graph Data Structure And Algorithms Randomized Algorithms Branch and Bound Algorithm The Role of Algorithms in Computing Most important type of Algorithms Why Data Structures and Algorithms Are Important to Learn? How can one become good at Data structures and Algorithms easily? Analysis of Algorithms | Set 4 (Analysis of Loops) View Discussion Improve Article Save Article Like Article Difficulty Level : Easy Last Updated : 13 Jul, 2022 We have discussed Asymptotic Analysis, Worst, Average and Best Cases and Asymptotic Notations in previous posts. In this post, an analysis of iterative programs with simple examples is discussed. 1) O(1): Time complexity of a function (or set of statements) is considered as O(1) if it doesn’t contain loop, recursion, and call to any other non-constant time function.    // set of non-recursive and non-loop statements For example, swap() function has O(1) time complexity. A loop or recursion that runs a constant number of times is also considered as O(1). For example, the following loop is O(1).    // Here c is a constant   
   for (int i = 1; i <= c; i++) {  
        // some O(1) expressions
   } 2) O(n): Time Complexity of a loop is considered as O(n) if the loop variables are incremented/decremented by a constant amount. For example following functions have O(n) time complexity.    // Here c is a positive integer constant   
   for (int i = 1; i <= n; i += c) {  
        // some O(1) expressions
   }

   for (int i = n; i > 0; i -= c) {
        // some O(1) expressions
   } 3) O(nc): Time complexity of nested loops is equal to the number of times the innermost statement is executed. For example, the following sample loops have O(n2) time complexity   
   for (int i = 1; i <=n; i += c) {
       for (int j = 1; j <=n; j += c) {
          // some O(1) expressions
       }
   }

   for (int i = n; i > 0; i -= c) {
       for (int j = i+1; j <=n; j += c) {
          // some O(1) expressions
   } For example, Selection sort and Insertion Sort have O(n2) time complexity. 4) O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables are divided/multiplied by a constant amount. And also for recursive call in recursive function the Time Complexity is considered as O(Logn).    for (int i = 1; i <=n; i *= c) {
       // some O(1) expressions
   }
   for (int i = n; i > 0; i /= c) {
       // some O(1) expressions
   } //Recursive function
void recurse(n)
{
    if(n==0)
        return;
    else{
        // some O(1) expressions
    }
    recurse(n-1);
} For example, Binary Search(refer iterative implementation) has O(Logn) time complexity. Let us see mathematically how it is O(Log n). The series that we get in the first loop is 1, c, c2, c3, … ck. If we put k equals to Logcn, we get cLogcn which is n. 5) O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop variables are reduced/increased exponentially by a constant amount.    // Here c is a constant greater than 1   
   for (int i = 2; i <=n; i = pow(i, c)) { 
       // some O(1) expressions
   }
   //Here fun is sqrt or cuberoot or any other constant root
   for (int i = n; i > 1; i = fun(i)) { 
       // some O(1) expressions
   } See this for mathematical details. How to combine the time complexities of consecutive loops? When there are consecutive loops, we calculate time complexity as a sum of time complexities of individual loops.    for (int i = 1; i <=m; i += c) {  
        // some O(1) expressions
   }
   for (int i = 1; i <=n; i += c) {
        // some O(1) expressions
   }
   Time complexity of above code is O(m) + O(n) which is O(m+n)
   If m == n, the time complexity becomes O(2n) which is O(n).   How to calculate time complexity when there are many if, else statements inside loops? As discussed here, worst-case time complexity is the most useful among best, average and worst. Therefore we need to consider the worst case. We evaluate the situation when values in if-else conditions cause a maximum number of statements to be executed. For example, consider the linear search function where we consider the case when an element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if-else and other complex control statements. How to calculate the time complexity of recursive functions? The time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post. The following is a cheat sheet of the time complexities of various algorithms. Algorithms Cheat Sheet Algorithm Best Case Average Case Worst Case Selection Sort O(n^n) O(n^n) O(n^n) Bubble Sort O(n) O(n^n) O(n^n) Insertion Sort O(n) O(n^n) O(n^n) Tree Sort O(nlogn) O(nlogn) O(n^n) Radix Sort O(dn) O(dn) O(dn) Merge Sort O(nlogn) O(nlogn) O(nlogn) Heap Sort O(nlogn) O(nlogn) O(nlogn) Quick Sort O(nlogn) O(nlogn) O(n^n) Bucket Sort O(n+k) O(n+k) O(n^n) Counting Sort O(n+k) O(n+k) O(n+k) Quiz on Analysis of Algorithms For more details, please refer: Design and Analysis of Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_up Save Like Previous Analysis of Algorithms | Set 3 (Asymptotic Notations) Next Analysis of Algorithm | Set 4 (Solving Recurrences) Recommended Articles Page : Analysis of Algorithms | Set 1 (Asymptotic Analysis) 03, Jan 12 Analysis of Algorithms | Big-O analysis 28, Feb 18 Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) 23, Sep 14 Analysis of Algorithms | Set 5 (Practice Problems) 02, May 17 Algorithms Sample Questions | Set 3 | Time Order Analysis 27, May 19 Analysis of Algorithms | Set 3 (Asymptotic Notations) 26, Oct 13 Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) 19, Feb 12 Performance of loops (A caching question) 30, Aug 15 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Analysis of algorithms | little o and little omega notations 14, Aug 17 Analysis of Algorithms | Big - Ω (Big- Omega) Notation 11, Jul 21 Analysis of Algorithms | Big - Θ (Big Theta) Notation 11, Jul 21 Analysis of Algorithm | Set 4 (Solving Recurrences) 13, Feb 14 Analysis of different sorting techniques 29, Jan 18 Time Complexity Analysis | Tower Of Hanoi (Recursion) 27, Feb 18 Amortized analysis for increment in counter 23, Mar 18 Guidelines for asymptotic analysis 27, May 21 Complexity analysis of various operations of Binary Min Heap 26, Jun 20 Prune-and-Search | A Complexity Analysis Overview 19, Jul 21 Difference between Posteriori and Priori analysis 07, Aug 19 What is algorithm and why analysis of it is important? 12, Jan 21 Complexity Analysis of Binary Search 29, May 19 Examples of Big-O analysis 23, Nov 20 Practice Questions on Time Complexity Analysis 12, Dec 17 Article Contributed By : GeeksforGeeks Vote for difficulty Current difficulty : Easy Easy Normal Medium Hard Expert Improved By : meghajatana 23603vaibhav2021 susobhanakhuli shreyasnaphad Article Tags : Complexity-analysis Algorithms Analysis Articles Practice Tags : Algorithms Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New DSA Live Classes for Working Professionals View Details Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation- Self Paced Course View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register