https://www.geeksforgeeks.org/lower-and-upper-bound-theory/?ref=ghm Lower and Upper Bound Theory - GeeksforGeeks Skip to content Courses For Working Professionals LIVE DSA Live Classes System Design Java Backend Development Full Stack LIVE Explore More Self-Paced DSA- Self Paced SDE Theory All Development Courses Explore More For Students LIVE Competitive Programming GATE Live Course 2023 Data Science Explore More Self-Paced DSA- Self Paced CIP JAVA / Python / C++ Explore More School Courses School Guide Python Programming Learn To Make Apps Explore more All Courses Tutorials Algorithms Analysis of Algorithms Asymptotic Analysis Worst, Average and Best Cases Asymptotic Notations Little o and little omega notations Lower and Upper Bound Theory Analysis of Loops Solving Recurrences Amortized Analysis What does 'Space Complexity' mean ? Pseudo-polynomial Algorithms Polynomial Time Approximation Scheme A Time Complexity Question Searching Algorithms Sorting Algorithms Graph Algorithms Pattern Searching Geometric Algorithms Mathematical Bitwise Algorithms Randomized Algorithms Greedy Algorithms Dynamic Programming Divide and Conquer Backtracking Branch and Bound All Algorithms Data Structures Arrays Linked List Stack Queue Binary Tree Binary Search Tree Heap Hashing Graph Advanced Data Structure Matrix Strings All Data Structures Interview Corner Company Preparation Top Topics Practice Company Questions Interview Experiences Experienced Interviews Internship Interviews Competititve Programming Design Patterns System Design Tutorial Multiple Choice Quizzes Languages C C++ Java Python C# JavaScript jQuery SQL PHP Scala Perl Go Language HTML CSS Kotlin ML & Data Science Machine Learning Data Science CS Subjects Mathematics Operating System DBMS Computer Networks Computer Organization and Architecture Theory of Computation Compiler Design Digital Logic Software Engineering GATE GATE Computer Science Notes Last Minute Notes GATE CS Solved Papers GATE CS Original Papers and Official Keys GATE 2021 Dates GATE CS 2021 Syllabus Important Topics for GATE CS Web Technologies HTML CSS JavaScript AngularJS ReactJS NodeJS Bootstrap jQuery PHP Software Designs Software Design Patterns System Design Tutorial School Learning School Programming Mathematics Number System Algebra Trigonometry Statistics Probability Geometry Mensuration Calculus Maths Notes (Class 8-12) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Class 12 Notes NCERT Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution RD Sharma Solutions Class 8 Maths Solution Class 9 Maths Solution Class 10 Maths Solution Class 11 Maths Solution Class 12 Maths Solution Physics Notes (Class 8-11) Class 8 Notes Class 9 Notes Class 10 Notes Class 11 Notes Chemistry Notes Class 8 Notes Class 9 Notes Class 10 Notes CS Exams/PSUs ISRO ISRO CS Original Papers and Official Keys ISRO CS Solved Papers ISRO CS Syllabus for Scientist/Engineer Exam UGC NET UGC NET CS Notes Paper II UGC NET CS Notes Paper III UGC NET CS Solved Papers Student Campus Ambassador Program School Ambassador Program Project Geek of the Month Campus Geek of the Month Placement Course Competititve Programming Testimonials Student Chapter Geek on the Top Internship Careers Jobs Apply for Jobs Post a Job Hire with Us Know about Jobathon Jobathon Practice All DSA Problems Problem of the Day Interview Series: Weekly Contests Bi-Wizard Coding: School Contests Contests and Events Practice SDE Sheet Curated DSA Lists Top 50 Array Problems Top 50 String Problems Top 50 Tree Problems Top 50 Graph Problems Top 50 DP Problems Write Come write articles for us and get featured Practice Learn and code with the best industry experts Premium Get access to ad-free content, doubt assistance and more! Jobs Come and find your dream job with us Geeks Digest Quizzes Geeks Campus Gblog Articles IDE Campus Mantri Home Saved Videos Courses GBlog Puzzles What's New ? Change Language Array Matrix Strings Hashing Linked List Stack Queue Binary Tree Binary Search Tree Heap Graph Searching Sorting Divide & Conquer Mathematical Geometric Bitwise Greedy Backtracking Branch and Bound Dynamic Programming Pattern Searching Randomized Related Articles ▲ Related Articles Lower and Upper Bound Theory Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms NP-Completeness | Set 1 (Introduction) A Time Complexity Question Merge Sort QuickSort HeapSort Binary Heap Time Complexity of building a heap Applications of Heap Data Structure Binomial Heap Fibonacci Heap | Set 1 (Introduction) Fibonacci Heap – Insertion and Union Fibonacci Heap – Deletion, Extract min and Decrease key Leftist Tree / Leftist Heap K-ary Heap Iterative HeapSort Top 50 Array Coding Problems for Interviews Recursion Difference between BFS and DFS Counting Sort Analysis of Algorithms | Set 1 (Asymptotic Analysis) A* Search Algorithm CPU Scheduling in Operating Systems Lower and Upper Bound Theory Analysis of Algorithms | Set 4 (Analysis of Loops) Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) Analysis of Algorithms | Set 3 (Asymptotic Notations) Analysis of Algorithm | Set 4 (Solving Recurrences) Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) What does ‘Space Complexity’ mean? Pseudo-polynomial Algorithms NP-Completeness | Set 1 (Introduction) A Time Complexity Question Merge Sort QuickSort HeapSort Binary Heap Time Complexity of building a heap Applications of Heap Data Structure Binomial Heap Fibonacci Heap | Set 1 (Introduction) Fibonacci Heap – Insertion and Union Fibonacci Heap – Deletion, Extract min and Decrease key Leftist Tree / Leftist Heap K-ary Heap Iterative HeapSort Top 50 Array Coding Problems for Interviews Recursion Difference between BFS and DFS Counting Sort Analysis of Algorithms | Set 1 (Asymptotic Analysis) A* Search Algorithm CPU Scheduling in Operating Systems Lower and Upper Bound Theory View Discussion Improve Article Save Article Like Article Difficulty Level : Easy Last Updated : 08 Jun, 2022 The Lower and Upper Bound Theory provides a way to find the lowest complexity algorithm to solve a problem. Before understanding the theory, first, let’s have a brief look at what Lower and Upper bounds are. Lower Bound – Let L(n) be the running time of an algorithm A(say), then g(n) is the Lower Bound of A if there exist two constants C and N such that L(n) >= C*g(n) for n > N. Lower bound of an algorithm is shown by the asymptotic notation called Big Omega (or just Omega). Upper Bound – Let U(n) be the running time of an algorithm A(say), then g(n) is the Upper Bound of A if there exist two constants C and N such that U(n) <= C*g(n) for n > N. Upper bound of an algorithm is shown by the asymptotic notation called Big Oh(O) (or just Oh). 1. Lower Bound Theory: According to the lower bound theory, for a lower bound L(n) of an algorithm, it is not possible to have any other algorithm (for a common problem) whose time complexity is less than L(n) for random input. Also, every algorithm must take at least L(n) time in the worst case. Note that L(n) here is the minimum of all the possible algorithms, of maximum complexity. The Lower Bound is very important for any algorithm. Once we calculated it, then we can compare it with the actual complexity of the algorithm and if their order is the same then we can declare our algorithm as optimal. So in this section, we will be discussing techniques for finding the lower bound of an algorithm. Note that our main motive is to get an optimal algorithm, which is the one having its Upper Bound the Same as its Lower Bound (U(n)=L(n)). Merge Sort is a common example of an optimal algorithm. Trivial Lower Bound – It is the easiest method to find the lower bound. The Lower bounds which can be easily observed based on the number of input taken and the number of output produced are called Trivial Lower Bound. Example: Multiplication of n x n matrix, where, Input: For 2 matrices we will have 2n2 inputs
Output: 1 matrix of order n x n, i.e.,  n2 outputs In the above example, it’s easily predictable that the lower bound is O(n2). Computational Model – The method is for all those algorithms that are comparison-based. For example, in sorting, we have to compare the elements of the list among themselves and then sort them accordingly. Similar is the case with searching and thus we can implement the same in this case. Now we will look at some examples to understand its usage. Ordered Searching – It is a type of searching in which the list is already sorted. Example-1: Linear search Explanation – In linear search, we compare the key with the first element if it does not match we compare it with the second element, and so on till we check against the nth element. Else we will end up with a failure. Example-2: Binary search Explanation – In binary search, we check the middle element against the key, if it is greater we search the first half else we check the second half and repeat the same process. The diagram below there is an illustration of binary search in an array consisting of 4 elements Calculating the lower bound: The max no of comparisons is n. Let there be k levels in the tree. No. of nodes will be 2k-1 The upper bound of no of nodes in any comparison-based search of an element in the list of size n will be n as there are a maximum of n comparisons in worst case scenario 2k-1 Each level will take 1 comparison thus no. of comparisons k≥|log2n| Thus the lower bound of any comparison-based search from a list of n elements cannot be less than log(n). Therefore we can say that Binary Search is optimal as its complexity is Θ(log n). Sorting – The diagram below is an example of a tree formed in sorting combinations with 3 elements. Example – For n elements, finding lower bound using computation model. Explanation – For n elements, we have a total of n! combinations (leaf nodes). (Refer to the diagram the total combinations are 3! or 6) also, it is clear that the tree formed is a binary tree. Each level in the diagram indicates a comparison. Let there be k levels => 2k is the total number of leaf nodes in a full binary tree thus in this case we have n!≤2k. As the k in the above example is the no of comparisons thus by computational model lower bound = k. Now we can say that,
n!≤2T(n)
Thus, 
T(n)>|log n!| 
=> n!<=nn
Thus,
log n!<=log nn
Taking ceiling function on both sides, we get
|-log nn-|>=|-log n!-|
Thus complexity becomes Θ(lognn) or Θ(nlogn) Using Lower bond theory to solve the algebraic problem: Straight Line Program – The type of program built without any loops or control structures is called the Straight Line Program. For example, C //summing to nos Sum(a, b) { //no loops and no control structures c:= a+b; return c; } Algebraic Problem – Problems related to algebra like solving equations inequalities etc. come under algebraic problems. For example, solving equation ax2+bx+c with simple programming. C Algo_Sol(a, b, c, x) { //1 assignment v:=a*x; //1 assignment v:=v+b; //1 assignment v:=v*x; //1 assignment ans:=v+c; return ans; } The complexity for solving here is 4 (excluding the returning). The above example shows us a simple way to solve an equation for a 2-degree polynomial i.e., 4 thus for nth degree polynomial we will have a complexity of O(n2). Let us demonstrate via an algorithm. Example: x+a0 is a polynomial of degree n. C pow(x, n) { p := 1; //loop from 1 to n for i:=1 to n p := p*x; return p; } polynomial(A, x, n) { int p, v:=0; for i := 0 to n //loop within a loop from 0 to n v := v + A[i]*pow(x, i); return v; } Loop within a loop => complexity = O(n2); Now to find an optimal algorithm we need to find the lower bound here (as per lower bound theory). As per Lower Bound Theory, The optimal algorithm to solve the above problem is the one having complexity O(n). Let’s prove this theorem using lower bounds. Theorem: To prove that the optimal algo of solving a n degree polynomial is O(n) Proof: The best solution for reducing the algo is to make this problem less complex by dividing the polynomial into several straight-line problems. => anxn+an-1xn-1+an-2xn-2+...+a1x+a0 
can be written as 
((..(anx+an-1)x+..+a2)x+a1)x+a0
Now, the algorithm will be as,
v=0
v=v+an
v=v*x
v=v+an-1
v=v*x
...
v=v+a1
v=v*x
v=v+a0 C polynomial(A, x, n) { int p, v=0; // loop executed n times for i = n to 0 v = (v + A[i])*x; return v; } The complexity of this code is O(n). This way of solving such equations is called Horner’s method. Here is where lower bound theory works and gives the optimum algorithm’s complexity as O(n). 2. Upper Bound Theory: According to the upper bound theory, for an upper bound U(n) of an algorithm, we can always solve the problem at most U(n) time. Time taken by a known algorithm to solve a problem with worse case input gives us the upper bound. My Personal Notes arrow_drop_up Save Like Next Analysis of Algorithms | Set 4 (Analysis of Loops) Recommended Articles Page : Efficient method to store a Lower Triangular Matrix using Column-major mapping 15, Jun 21 Proof that Independent Set in Graph theory is NP Complete 26, Jun 20 Code Optimization Technique (logical AND and logical OR) 08, Jan 19 Generate an array of given size with equal count and sum of odd and even numbers 10, May 20 Asymptotic Analysis and comparison of sorting algorithms 28, Dec 16 Master Theorem For Subtract and Conquer Recurrences 12, Jul 17 Advanced master theorem for divide and conquer recurrences 17, Apr 18 Complexity of different operations in Binary tree, Binary Search Tree and AVL tree 19, Jan 18 Different types of recurrence relations and their solutions 29, Jan 18 Find and Count total factors of co-prime A or B in a given range 1 to N 14, Apr 20 Find a Symmetric matrix of order N that contain integers from 0 to N-1 and main diagonal should contain only 0's 12, Apr 19 Difference between Deterministic and Non-deterministic Algorithms 11, Sep 18 Count pairs (i,j) such that (i+j) is divisible by A and B both 28, Oct 18 Difference between Recursion and Iteration 27, Dec 18 Check whether bitwise AND of N numbers is Even or Odd 12, Sep 19 Find numbers which are multiples of first array and factors of second array 30, Sep 19 Rearrange array elements such that Bitwise AND of first N - 1 elements is equal to last element 05, Nov 19 Minimize the sum of digits of A and B such that A + B = N 03, Dec 19 C program for Time Complexity plot of Bubble, Insertion and Selection Sort using Gnuplot 17, Jan 20 Queries On Array with disappearing and reappearing elements 06, Jan 20 Area of the circle that has a square and a circle inscribed in it 08, Jan 20 Queries to check whether bitwise AND of a subarray is even or odd 28, Jan 20 Count of even and odd set bit with array element after XOR with K 30, Mar 20 Maximum length Subsequence with alternating sign and maximum Sum 22, Apr 20 Article Contributed By : piyush25pv @piyush25pv Vote for difficulty Current difficulty : Easy Easy Normal Medium Hard Expert Improved By : soumya7 sriharimalla001 pawan1996 23603vaibhav2021 shreelakshmijoshi1 Article Tags : Picked Technical Scripter 2018 Algorithms Analysis Technical Scripter Practice Tags : Algorithms Report Issue Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load Comments What's New DSA Live Classes for Working Professionals View Details Data Structures & Algorithms- Self Paced Course View Details Complete Interview Preparation- Self Paced Course View Details Improve your Coding Skills with PracticeTry It! A-143, 9th Floor, Sovereign Corporate Tower, Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.org Company About Us Careers In Media Contact Us Privacy Policy Copyright Policy Learn Algorithms Data Structures SDE Cheat Sheet Machine learning CS Subjects Video Tutorials Courses News Top News Technology Work & Career Business Finance Lifestyle Knowledge Languages Python Java CPP Golang C# SQL Kotlin Web Development Web Tutorials Django Tutorial HTML JavaScript Bootstrap ReactJS NodeJS Contribute Write an Article Improve an Article Pick Topics to Write Write Interview Experience Internships Video Internship @geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now! Login Register