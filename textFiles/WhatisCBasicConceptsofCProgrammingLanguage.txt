https://www.guru99.com/cpp-tutorial.html What is C++? Basic Concepts of C++ Programming Language Skip to content Home Testing Expand Agile Testing JUnit Quality Center(ALM) Bugzilla HP Loadrunner RPA Cucumber Software Testing SAP Testing Database Testing Mobile Testing Selenium ETL Testing Mantis SoapUI JMeter Postman TEST Management JIRA QTP TestLink SAP Expand ABAP CRM PI/PO APO Crystal Reports PP Beginners FICO SD Basis HANA SAPUI5 BODS HR Security Tutorial BI/BW MM Solution Manager BPC QM Successfactors CO Payroll SAP Tutorial Web Expand Apache Java PHP SQL Server AngularJS JSP PL/SQL UML ASP.NET Kotlin PostgreSQL VB.NET C Linux Python VBScript C# MariaDB ReactJS Web Services C++ MS Access Ruby & Rails WPF CodeIgniter MySQL Scala SQLite DBMS Node.js SQL Perl JavaScript Must Learn Expand Accounting Embedded Systems Operating System Algorithms Ethical Hacking PMP Android Excel Tutorial Photoshop Blockchain Go Programming Project Management Business Analyst IoT Reviews Build Website ITIL Salesforce Cloud Computing Jenkins SEO COBOL MIS Software Engineering Compiler Design Movie VBA Courses Networking VPN Big Data Expand AWS Hive Power BI Big Data Informatica Qlikview Cassandra MicroStrategy Tableau Cognos MongoDB Talend Data Warehousing NiFi ZooKeeper DevOps OBIEE Pentaho HBase Live Project Expand Live Agile Testing Live Selenium Project Live HP ALM Live Selenium 2 Live Java Project Live Security Testing Live Mobile Testing Live Testing Project Live Payment Gateway Live Testing 2 Live PHP Project Live Telecom Live Projects Hub Live UFT/QTP Testing Live Python Project Live SEO Project AI Expand Artificial Intelligence PyTorch Data Science R Programming Keras TensorFlow NLTK Blog Search Toggle Menu What is C++? Basic Concepts of C++ Programming Language ByBarbara Thompson Hours UpdatedJuly 19, 2022 What is C++? C++ is a general-purpose, object-oriented programming language. It was created by Bjarne Stroustrup at Bell Labs circa 1980. C++ is very similar to C (invented by Dennis Ritchie in the early 1970s). C++ is so compatible with C that it will probably compile over 99% of C programs without changing a line of source code. Though C++ is a lot of well-structured and safer language than C as it OOPs based. Some computer languages are written for a specific purpose. Like, Java was initially devised to control toasters and some other electronics. C was developed for programming OS. Pascal was conceptualized to teach proper programming techniques. But C++ is a general-purpose language. It well deserves the widely acknowledged nickname “Swiss Pocket Knife of Languages.” In this introduction to C++ tutorial, you will learn C++ basic concepts- What is C++? Popular programming languages in use? Is C++ best programming language? Who uses C++? Five Basic Concepts of C++ Use of C++ Programming Language Popular programming languages in use? Popular languages that are mainly in use are Java, C++, Python, and C. Lower level languages like Assembly Language C C++ These languages force the programmer to think more about the problem in computer programming terms and its implementations, instead of the business logic. As you can see despite being old, C++ is relatively popular still today which is a feat in and its own. The graph is from stackoverflow.com Is C++ best programming language? The answer depends on perspective and requirements. Some tasks can be done in C++, though not very quickly. For example, designing GUI screens for applications. Other languages like Visual Basic, Python have GUI design elements built into them. Therefore, they are better suited for GUI type of task. Some of the scripting languages that provide extra programmability to applications. Such as MS Word and even photoshop tend to be variants of Basic, not C++. C++ is still used widely, and the most famous software have their backbone in C++. This tutorial will help you learn C++ basic and the advanced concepts. Who uses C++? Some of today’s most visible used systems have their critical parts written in C++. Examples are Amadeus (airline ticketing) Bloomberg (financial formation), Amazon (Web commerce), Google (Web search) Facebook (social media) Many programming languages depend on C++’s performance and reliability in their implementation. Examples include: Java Virtual Machines JavaScript interpreters (e.g., Google’s V8) Browsers (e.g., Internet Explorer, Mozilla’s Firefox, Apple’s Safari, and Google’s Chrome) Application and Web frameworks (e.g., Microsoft’s .NET Web services framework). Applications that involve local and wide area networks, user interaction, numeric, graphics, and database access highly depend on C++ language. Five Basic Concepts of C++ Here are five basic C++ concepts: C++ Variables Variables are the backbone of any programming language. A variable is merely a way to store some information for later use. We can retrieve this value or data by referring to a “word” that will describe this information. Once declared and defined they may be used many times within the scope in which they were declared. C++ Control Structures When a program runs, the code is read by the compiler line by line (from top to bottom, and for the most part left to right). This is known as “code flow.“ When the code is being read from top to bottom, it may encounter a point where it needs to make a decision. Based on the decision, the program may jump to a different part of the code. It may even make the compiler re-run a specific piece again, or just skip a bunch of code. You could think of this process like if you were to choose from different courses from Guru99. You decide, click a link and skip a few pages. In the same way, a computer program has a set of strict rules to decide the flow of program execution. C++ Data Structures Let’s use a list of courses on “guru99” as the example! You probably have a list of courses in front of you. But how do you think they stored that. There can be a lot of courses, and different users may register for different courses. Do they generate a different variable for each user? For example, let’s say we need to keep track of 10 courses. First, the WRONG WAY: If we need to store 10 courses, we would probably define 10 variables, right? Wrong. In the world of programming, this is just a horrible way of trying to store 10 different variables. This is because of two main reasons: The huge amount of text that you’ll need to write in your program. Sure, right now we only have 10 courses, so it’s not too bad, but what if we had 1,000 courses! Imagine typing that out a thousand times! Forget about it! The flexibility. Adding another course would need manual edits to the code. We would have created variable course11. This is just crazy! So, what is the RIGHT WAY? Storing them in data structures. A data structure is a great way to get around having to create thousands of variables. C++ contains many types of inbuilt data structures. Most often used is arrays which will be taught later. C++ Syntax The syntax is a layout of words, expression, and symbols. Well, it’s because an email address has its well-defined syntax. You need some combination of letters, numbers, potentially with underscores (_) or periods (.) in between, followed by an at the rate (@) symbol, followed by some website domain (company.com). So, syntax in a programming language is much the same. They are some well-defined set of rules that allow you to create some piece of well-functioning software. But, if you don’t abide by the rules of a programming language or syntax, you’ll get errors. C++ Tools In the real world, a tool is something (usually a physical object) that helps you to get a certain job done promptly. Well, this holds true with the programming world too. A tool in programming is some piece of software which when used with the code allows you to program faster. There are probably tens of thousands, if not millions of different tools across all the programming languages. Most crucial tool, considered by many, is an IDE, an Integrated Development Environment. An IDE is a software which will make your coding life so much easier. IDEs ensure that your files and folders are organized and give you a nice and clean way to view them. Use of C++ Programming Language Here are some prime uses of C++ Programming Language: Operating Systems: Wheater it is Microsoft Windows or Mac OSX or Linux – all of the operating systems have some parts which are programmed in C++. It is the backbone of all the well-known OSs as C++ is a strongly typed and quick programming language, that makes it an ideal choice for developing an operating system. Games: Because of the fact that it is one of the fastest programming languages, C++ is widely used in programming of game development engines. C++ can easily manipulate hardware resources and it can also provide procedural programming for CPU intensive functions. Browsers: The rendering engines of various web browsers are programmed in C++ because of the speed it offers. Libraries: Many high-level libraries use C++ as the core programming language. For example, several Machine Learning libraries use C++ in the backend because of its speed. Graphics: C++ is widely used in almost all graphics applications that require fast rendering, image processing, real-time physics and mobile sensors. Banking Applications: One of the most popularly used core-banking systems – Infosys Finacle, uses C++ as the backend programming language. Banking applications need to process millions of transactions on a daily basis and require high concurrency and low latency support. Cloud/Distributed Systems: Cloud storage systems use scalable file-systems that work close to the hardware. That’s why C++ becomes a preferred choice for Cloud systems. Embedded Systems: Various embedded systems like medical machines, smartwatches, etc., use C++ as the primary programming language. Compilers: Compilers of various programming languages use C++ as the backend programming language. You Might Like: Arrays in C++ | Declare | Initialize | Pointer to Array Examples C++ Basic Input/Output: Cout, Cin, Cerr Example C++ Exception Handling: Try, Catch, throw Example Map in C++ Standard Template Library (STL) with Print Example C++ Operator Overloading with Examples Post navigation Report a Bug Previous Prev Next Continue Top Tutorials About About Us Advertise with Us Write For Us Contact Us Python Testing Hacking Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Interesting eBook Blog Quiz SAP eBook SAP Java SQL Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Selenium Cryptocurrency VPNs © Copyright - Guru99 2022 Privacy Policy | Affiliate Disclaimer | ToS Scroll to top Home TestingExpand child menu Expand Agile Testing JUnit Quality Center(ALM) Bugzilla HP Loadrunner RPA Cucumber Software Testing SAP Testing Database Testing Mobile Testing Selenium ETL Testing Mantis SoapUI JMeter Postman TEST Management JIRA QTP TestLink SAPExpand child menu Expand ABAP CRM PI/PO APO Crystal Reports PP Beginners FICO SD Basis HANA SAPUI5 BODS HR Security Tutorial BI/BW MM Solution Manager BPC QM Successfactors CO Payroll SAP Tutorial WebExpand child menu Expand Apache Java PHP SQL Server AngularJS JSP PL/SQL UML ASP.NET Kotlin PostgreSQL VB.NET C Linux Python VBScript C# MariaDB ReactJS Web Services C++ MS Access Ruby & Rails WPF CodeIgniter MySQL Scala SQLite DBMS Node.js SQL Perl JavaScript Must LearnExpand child menu Expand Accounting Embedded Systems Operating System Algorithms Ethical Hacking PMP Android Excel Tutorial Photoshop Blockchain Go Programming Project Management Business Analyst IoT Reviews Build Website ITIL Salesforce Cloud Computing Jenkins SEO COBOL MIS Software Engineering Compiler Design Movie VBA Courses Networking VPN Big DataExpand child menu Expand AWS Hive Power BI Big Data Informatica Qlikview Cassandra MicroStrategy Tableau Cognos MongoDB Talend Data Warehousing NiFi ZooKeeper DevOps OBIEE Pentaho HBase Live ProjectExpand child menu Expand Live Agile Testing Live Selenium Project Live HP ALM Live Selenium 2 Live Java Project Live Security Testing Live Mobile Testing Live Testing Project Live Payment Gateway Live Testing 2 Live PHP Project Live Telecom Live Projects Hub Live UFT/QTP Testing Live Python Project Live SEO Project AIExpand child menu Expand Artificial Intelligence PyTorch Data Science R Programming Keras TensorFlow NLTK Blog Toggle Menu Close Search for: Searchhttps://www.guru99.com/cpp-tutorial.html What is C++? Basic Concepts of C++ Programming Language Skip to content Home Testing Expand Agile Testing JUnit Quality Center(ALM) Bugzilla HP Loadrunner RPA Cucumber Software Testing SAP Testing Database Testing Mobile Testing Selenium ETL Testing Mantis SoapUI JMeter Postman TEST Management JIRA QTP TestLink SAP Expand ABAP CRM PI/PO APO Crystal Reports PP Beginners FICO SD Basis HANA SAPUI5 BODS HR Security Tutorial BI/BW MM Solution Manager BPC QM Successfactors CO Payroll SAP Tutorial Web Expand Apache Java PHP SQL Server AngularJS JSP PL/SQL UML ASP.NET Kotlin PostgreSQL VB.NET C Linux Python VBScript C# MariaDB ReactJS Web Services C++ MS Access Ruby & Rails WPF CodeIgniter MySQL Scala SQLite DBMS Node.js SQL Perl JavaScript Must Learn Expand Accounting Embedded Systems Operating System Algorithms Ethical Hacking PMP Android Excel Tutorial Photoshop Blockchain Go Programming Project Management Business Analyst IoT Reviews Build Website ITIL Salesforce Cloud Computing Jenkins SEO COBOL MIS Software Engineering Compiler Design Movie VBA Courses Networking VPN Big Data Expand AWS Hive Power BI Big Data Informatica Qlikview Cassandra MicroStrategy Tableau Cognos MongoDB Talend Data Warehousing NiFi ZooKeeper DevOps OBIEE Pentaho HBase Live Project Expand Live Agile Testing Live Selenium Project Live HP ALM Live Selenium 2 Live Java Project Live Security Testing Live Mobile Testing Live Testing Project Live Payment Gateway Live Testing 2 Live PHP Project Live Telecom Live Projects Hub Live UFT/QTP Testing Live Python Project Live SEO Project AI Expand Artificial Intelligence PyTorch Data Science R Programming Keras TensorFlow NLTK Blog Search Toggle Menu What is C++? Basic Concepts of C++ Programming Language ByBarbara Thompson Hours UpdatedJuly 19, 2022 What is C++? C++ is a general-purpose, object-oriented programming language. It was created by Bjarne Stroustrup at Bell Labs circa 1980. C++ is very similar to C (invented by Dennis Ritchie in the early 1970s). C++ is so compatible with C that it will probably compile over 99% of C programs without changing a line of source code. Though C++ is a lot of well-structured and safer language than C as it OOPs based. Some computer languages are written for a specific purpose. Like, Java was initially devised to control toasters and some other electronics. C was developed for programming OS. Pascal was conceptualized to teach proper programming techniques. But C++ is a general-purpose language. It well deserves the widely acknowledged nickname “Swiss Pocket Knife of Languages.” In this introduction to C++ tutorial, you will learn C++ basic concepts- What is C++? Popular programming languages in use? Is C++ best programming language? Who uses C++? Five Basic Concepts of C++ Use of C++ Programming Language Popular programming languages in use? Popular languages that are mainly in use are Java, C++, Python, and C. Lower level languages like Assembly Language C C++ These languages force the programmer to think more about the problem in computer programming terms and its implementations, instead of the business logic. As you can see despite being old, C++ is relatively popular still today which is a feat in and its own. The graph is from stackoverflow.com Is C++ best programming language? The answer depends on perspective and requirements. Some tasks can be done in C++, though not very quickly. For example, designing GUI screens for applications. Other languages like Visual Basic, Python have GUI design elements built into them. Therefore, they are better suited for GUI type of task. Some of the scripting languages that provide extra programmability to applications. Such as MS Word and even photoshop tend to be variants of Basic, not C++. C++ is still used widely, and the most famous software have their backbone in C++. This tutorial will help you learn C++ basic and the advanced concepts. Who uses C++? Some of today’s most visible used systems have their critical parts written in C++. Examples are Amadeus (airline ticketing) Bloomberg (financial formation), Amazon (Web commerce), Google (Web search) Facebook (social media) Many programming languages depend on C++’s performance and reliability in their implementation. Examples include: Java Virtual Machines JavaScript interpreters (e.g., Google’s V8) Browsers (e.g., Internet Explorer, Mozilla’s Firefox, Apple’s Safari, and Google’s Chrome) Application and Web frameworks (e.g., Microsoft’s .NET Web services framework). Applications that involve local and wide area networks, user interaction, numeric, graphics, and database access highly depend on C++ language. Five Basic Concepts of C++ Here are five basic C++ concepts: C++ Variables Variables are the backbone of any programming language. A variable is merely a way to store some information for later use. We can retrieve this value or data by referring to a “word” that will describe this information. Once declared and defined they may be used many times within the scope in which they were declared. C++ Control Structures When a program runs, the code is read by the compiler line by line (from top to bottom, and for the most part left to right). This is known as “code flow.“ When the code is being read from top to bottom, it may encounter a point where it needs to make a decision. Based on the decision, the program may jump to a different part of the code. It may even make the compiler re-run a specific piece again, or just skip a bunch of code. You could think of this process like if you were to choose from different courses from Guru99. You decide, click a link and skip a few pages. In the same way, a computer program has a set of strict rules to decide the flow of program execution. C++ Data Structures Let’s use a list of courses on “guru99” as the example! You probably have a list of courses in front of you. But how do you think they stored that. There can be a lot of courses, and different users may register for different courses. Do they generate a different variable for each user? For example, let’s say we need to keep track of 10 courses. First, the WRONG WAY: If we need to store 10 courses, we would probably define 10 variables, right? Wrong. In the world of programming, this is just a horrible way of trying to store 10 different variables. This is because of two main reasons: The huge amount of text that you’ll need to write in your program. Sure, right now we only have 10 courses, so it’s not too bad, but what if we had 1,000 courses! Imagine typing that out a thousand times! Forget about it! The flexibility. Adding another course would need manual edits to the code. We would have created variable course11. This is just crazy! So, what is the RIGHT WAY? Storing them in data structures. A data structure is a great way to get around having to create thousands of variables. C++ contains many types of inbuilt data structures. Most often used is arrays which will be taught later. C++ Syntax The syntax is a layout of words, expression, and symbols. Well, it’s because an email address has its well-defined syntax. You need some combination of letters, numbers, potentially with underscores (_) or periods (.) in between, followed by an at the rate (@) symbol, followed by some website domain (company.com). So, syntax in a programming language is much the same. They are some well-defined set of rules that allow you to create some piece of well-functioning software. But, if you don’t abide by the rules of a programming language or syntax, you’ll get errors. C++ Tools In the real world, a tool is something (usually a physical object) that helps you to get a certain job done promptly. Well, this holds true with the programming world too. A tool in programming is some piece of software which when used with the code allows you to program faster. There are probably tens of thousands, if not millions of different tools across all the programming languages. Most crucial tool, considered by many, is an IDE, an Integrated Development Environment. An IDE is a software which will make your coding life so much easier. IDEs ensure that your files and folders are organized and give you a nice and clean way to view them. Use of C++ Programming Language Here are some prime uses of C++ Programming Language: Operating Systems: Wheater it is Microsoft Windows or Mac OSX or Linux – all of the operating systems have some parts which are programmed in C++. It is the backbone of all the well-known OSs as C++ is a strongly typed and quick programming language, that makes it an ideal choice for developing an operating system. Games: Because of the fact that it is one of the fastest programming languages, C++ is widely used in programming of game development engines. C++ can easily manipulate hardware resources and it can also provide procedural programming for CPU intensive functions. Browsers: The rendering engines of various web browsers are programmed in C++ because of the speed it offers. Libraries: Many high-level libraries use C++ as the core programming language. For example, several Machine Learning libraries use C++ in the backend because of its speed. Graphics: C++ is widely used in almost all graphics applications that require fast rendering, image processing, real-time physics and mobile sensors. Banking Applications: One of the most popularly used core-banking systems – Infosys Finacle, uses C++ as the backend programming language. Banking applications need to process millions of transactions on a daily basis and require high concurrency and low latency support. Cloud/Distributed Systems: Cloud storage systems use scalable file-systems that work close to the hardware. That’s why C++ becomes a preferred choice for Cloud systems. Embedded Systems: Various embedded systems like medical machines, smartwatches, etc., use C++ as the primary programming language. Compilers: Compilers of various programming languages use C++ as the backend programming language. You Might Like: Arrays in C++ | Declare | Initialize | Pointer to Array Examples C++ Basic Input/Output: Cout, Cin, Cerr Example C++ Exception Handling: Try, Catch, throw Example Map in C++ Standard Template Library (STL) with Print Example C++ Operator Overloading with Examples Post navigation Report a Bug Previous Prev Next Continue Top Tutorials About About Us Advertise with Us Write For Us Contact Us Python Testing Hacking Career Suggestion SAP Career Suggestion Tool Software Testing as a Career Interesting eBook Blog Quiz SAP eBook SAP Java SQL Execute online Execute Java Online Execute Javascript Execute HTML Execute Python Selenium Cryptocurrency VPNs © Copyright - Guru99 2022 Privacy Policy | Affiliate Disclaimer | ToS Scroll to top Home TestingExpand child menu Expand Agile Testing JUnit Quality Center(ALM) Bugzilla HP Loadrunner RPA Cucumber Software Testing SAP Testing Database Testing Mobile Testing Selenium ETL Testing Mantis SoapUI JMeter Postman TEST Management JIRA QTP TestLink SAPExpand child menu Expand ABAP CRM PI/PO APO Crystal Reports PP Beginners FICO SD Basis HANA SAPUI5 BODS HR Security Tutorial BI/BW MM Solution Manager BPC QM Successfactors CO Payroll SAP Tutorial WebExpand child menu Expand Apache Java PHP SQL Server AngularJS JSP PL/SQL UML ASP.NET Kotlin PostgreSQL VB.NET C Linux Python VBScript C# MariaDB ReactJS Web Services C++ MS Access Ruby & Rails WPF CodeIgniter MySQL Scala SQLite DBMS Node.js SQL Perl JavaScript Must LearnExpand child menu Expand Accounting Embedded Systems Operating System Algorithms Ethical Hacking PMP Android Excel Tutorial Photoshop Blockchain Go Programming Project Management Business Analyst IoT Reviews Build Website ITIL Salesforce Cloud Computing Jenkins SEO COBOL MIS Software Engineering Compiler Design Movie VBA Courses Networking VPN Big DataExpand child menu Expand AWS Hive Power BI Big Data Informatica Qlikview Cassandra MicroStrategy Tableau Cognos MongoDB Talend Data Warehousing NiFi ZooKeeper DevOps OBIEE Pentaho HBase Live ProjectExpand child menu Expand Live Agile Testing Live Selenium Project Live HP ALM Live Selenium 2 Live Java Project Live Security Testing Live Mobile Testing Live Testing Project Live Payment Gateway Live Testing 2 Live PHP Project Live Telecom Live Projects Hub Live UFT/QTP Testing Live Python Project Live SEO Project AIExpand child menu Expand Artificial Intelligence PyTorch Data Science R Programming Keras TensorFlow NLTK Blog Toggle Menu Close Search for: Search